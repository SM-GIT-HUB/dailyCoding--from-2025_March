#include <bits/stdc++.h>

struct Node {
    int isTerminal;
    Node* children[26];

    Node()
    {
        isTerminal = 0;
        for (int i = 0; i < 26; i++) children[i] = nullptr;
    }
};

class Trie {
public:
    Node* root;
    Trie(): root(new Node()) {}

    void insert(string &word)
    {
        Node* curr = root;
        
        for (char ch : word)
        {
            if (!curr->children[ch - 'a']) {
                curr->children[ch - 'a'] = new Node();
            }

            curr = curr->children[ch - 'a'];
        }

        curr->isTerminal = 1;
    }

    void searchInto(Node* curr, string &temp, vector<string>& store)
    {
        if (store.size() == 3) return;
        if (curr->isTerminal) store.push_back(temp);

        temp.push_back('0');

        for (int i = 0; i < 26; i++)
        {
            if (curr->children[i])
            {
                temp.back() = 'a' + i;
                searchInto(curr->children[i], temp, store);
            }
        }

        temp.pop_back();
    }

    void search(string &word, vector<vector<string> >& ans)
    {
        string temp;
        Node* curr = root;

        vector<string> store;

        for (int i = 0; i < word.size(); i++)
        {
            char ch = word[i];

            temp.push_back(ch);
            if (!curr->children[ch - 'a']) break;

            store.clear();
            curr = curr->children[ch - 'a'];

            searchInto(curr, temp, store);
            ans[i] = store;
        }
    }
};

vector<vector<string> > autoSuggestion (int n, vector<string> S, int l, string P)
{
    // Write your code here.
    Trie tr;
    for (string &x : S) tr.insert(x);

    vector<vector<string> > ans(P.size());
    tr.search(P, ans);
    
    return ans;
}
