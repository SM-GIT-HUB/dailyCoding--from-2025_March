#include<bits/stdc++.h>

struct Node {
    Node* children[2];
    Node(): children({nullptr, nullptr}) {}
};

class Trie {
public:
    Node* root;

    Trie(): root(new Node()) {}

    void insert(int num)
    {
        Node* curr = root;

        for (int i = 30; i >= 0; i--)
        {
            int bit = ((num >> i) & 1);

            if (!curr->children[bit]) curr->children[bit] = new Node();
            curr = curr->children[bit];
        }
    }

    int getXor(int num)
    {
        int xorr = 0;
        Node* curr = root;

        for (int i = 30; i >= 0; i--)
        {
            int bit = ((num >> i) & 1);

            if (curr->children[!bit])
            {
                xorr = (xorr << 1) + 1;
                curr = curr->children[!bit];
            }
            else
            {
                xorr = (xorr << 1);
                curr = curr->children[bit];
            }
        }

        return xorr;
    }
};

int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{
    // Write your code here.
    Trie tr;
    int ans = 0;

    for (int x : arr1) tr.insert(x);

    for (int x : arr2) ans = max(tr.getXor(x), ans);

    return ans;
}
