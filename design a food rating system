class FoodRatings {
    static bool comp (const pair<int, string>& a, const pair<int, string>& b) {
        if (a.first != b.first) return (a.first < b.first);
        return (a.second > b.second);
    }
    using pq = priority_queue<pair<int, string>, vector<pair<int, string> >, decltype(&comp)>;
public:
    vector<int>& rating;
    vector<string>& cuisines;

    unordered_map<string, pq> cs;
    unordered_map<string, int> foodMap;

    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings): cuisines(cuisines), rating(ratings)
    {
        int n = foods.size();

        for (int i = 0; i < n; i++)
        {
            string &cuisine = cuisines[i];
            foodMap[foods[i]] = i;

            if (!cs.count(cuisine)) {
                cs[cuisine] = pq(&comp);
            }

            cs[cuisine].push({ratings[i], foods[i]});
        }
    }
    
    void changeRating(string food, int newRating) {
        int idx = foodMap[food];

        if (rating[idx] == newRating) {
            return;
        }

        rating[idx] = newRating;
        cs[cuisines[idx]].push({newRating, food});
    }
    
    string highestRated(string cuisine) {
        string curr = cs[cuisine].top().second;
        int idx = foodMap[curr];

        while (rating[idx] != cs[cuisine].top().first)
        {
            cs[cuisine].pop();
            curr = cs[cuisine].top().second;
            idx = foodMap[curr];
        }

        return curr;
    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */
