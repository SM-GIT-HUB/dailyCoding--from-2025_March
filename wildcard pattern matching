#include<bits/stdc++.h>

bool recur(int in1, int in2, int &m, int &n, string &pat, string &text, vector<int>& stars)
{
   if (in1 >= m && in2 >= n) {
      return 1;
   }

   if (in1 >= m) {
      return 0;
   }

   if (in2 >= n) {
      return stars[in1];
   }

   int ans = 0;

   if (pat[in1] == text[in2] || pat[in1] =='?') {
      ans = recur(in1 + 1, in2 + 1, m, n, pat, text, stars);
   }
   else if (pat[in1] == '*')
   {
      int ans1 = recur(in1, in2 + 1, m, n, pat, text, stars);
      int ans2 = recur(in1 + 1, in2, m, n, pat, text, stars);

      ans = (ans1 || ans2);
   }

   return ans;
}

bool memoization(int in1, int in2, int &m, int &n, string &pat, string &text, vector<int>& stars, vector<vector<int> >& dp)
{
   if (in1 >= m && in2 >= n) {
      return 1;
   }

   if (in1 >= m) {
      return 0;
   }

   if (in2 >= n) {
      return stars[in1];
   }

   if (dp[in1][in2] != -1) {
      return dp[in1][in2];
   }

   int ans = 0;

   if (pat[in1] == text[in2] || pat[in1] =='?') {
      ans = memoization(in1 + 1, in2 + 1, m, n, pat, text, stars, dp);
   }
   else if (pat[in1] == '*')
   {
      int ans1 = memoization(in1, in2 + 1, m, n, pat, text, stars, dp);
      int ans2 = memoization(in1 + 1, in2, m, n, pat, text, stars, dp);

      ans = (ans1 || ans2);
   }

   return dp[in1][in2] = ans;
}

int tabulation(int m, int n, string &pat, string &text)
{
   vector<vector<int> > dp(m + 1, vector<int>(n + 1, 0));
   dp[m][n] = 1;

   for (int in1 = m - 1; in1 >= 0; in1--)
   {
      if (dp[in1 + 1][n] == 1 && pat[in1] == '*') {
         dp[in1][n] = 1;
      }

      for (int in2 = n - 1; in2 >= 0; in2--)
      {
         int ans = 0;

         if (pat[in1] == text[in2] || pat[in1] =='?') {
            ans = dp[in1 + 1][in2 + 1];
         }
         else if (pat[in1] == '*')
         {
            int ans1 = dp[in1][in2 + 1];
            int ans2 = dp[in1 + 1][in2];

            ans = (ans1 || ans2);
         }

         dp[in1][in2] = ans;
      }
   }

   return dp[0][0];
}

int spaceOpt(int m, int n, string &pat, string &text)
{
   vector<int> next(n + 1, 0);
   vector<int> curr(n + 1, 0);

   next[n] = 1;
   int flag = 1;

   for (int in1 = m - 1; in1 >= 0; in1--)
   {
      if (pat[in1] != '*') {
         flag = 0;
      }

      curr[n] = flag;

      for (int in2 = n - 1; in2 >= 0; in2--)
      {
         int ans = 0;

         if (pat[in1] == text[in2] || pat[in1] =='?') {
            ans = next[in2 + 1];
         }
         else if (pat[in1] == '*')
         {
            int ans1 = curr[in2 + 1];
            int ans2 = next[in2];

            ans = (ans1 || ans2);
         }

         curr[in2] = ans;
      }

      next = curr;
   }

   return next[0];
}

bool wildcardMatching(string pat, string text)
{
   // Write your code here.
   int m = pat.size();
   int n = text.size();

   // vector<int> stars(m + 1, 0);
   // stars[m] = 1;

   // for (int i = m - 1; i >= 0 && pat[i] == '*'; i--)
   // {
   //    stars[i] = 1;
   // }

   // int ans = recur(0, 0, m, n, pat, text, stars);

   // vector<vector<int> > dp(m, vector<int>(n, -1));

   // int ans = memoization(0, 0, m, n, pat, text, stars, dp);

   // int ans = tabulation(m, n, pat, text);

   int ans = spaceOpt(m, n, pat, text);

   return ans;
}
