class Solution {
public:
    int recur(int start, int end, int i, int j, vector<int>& cuts)
    {
        if (i > j) {
            return 0;
        }

        int ans = INT_MAX;

        for (int k = i; k <= j; k++)
        {
            int currAns = end - start + recur(start, cuts[k], i, k - 1, cuts) + recur(cuts[k], end, k + 1, j, cuts);
            
            if (currAns < ans) {
                ans = currAns;
            }
        }

        return ans;
    }

    int memoization(int start, int end, int i, int j, vector<int>& cuts, vector<vector<int> >& dp)
    {
        if (i > j) {
            return 0;
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int ans = INT_MAX;

        for (int k = i; k <= j; k++)
        {
            int currAns = end - start + memoization(start, cuts[k], i, k - 1, cuts, dp) + memoization(cuts[k], end, k + 1, j, cuts, dp);
            
            if (currAns < ans) {
                ans = currAns;
            }
        }

        return dp[i][j] = ans;
    }

    int minCost(int n, vector<int>& cuts) {
        sort(cuts.begin(), cuts.end());
        int cn = cuts.size();

        // int ans = recur(0, n, 0, cuts.size() - 1, cuts);

        vector<vector<int> > dp(cn, vector<int>(cn, -1));

        int ans = memoization(0, n, 0, cn - 1, cuts, dp);

        return ans;
    }
};
