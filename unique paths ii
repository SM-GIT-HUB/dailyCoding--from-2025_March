class Solution {
public:
    int recur(int x, int y, int &m, int &n, vector<vector<int> >& obs)
    {
        if (x == m - 1 && y == n - 1) {
            return 1;
        }

        if (x >= m || y >= n || obs[x][y] == 1) {
            return 0;
        }

        int ans = recur(x + 1, y, m, n, obs);
        ans += recur(x, y + 1, m, n, obs);

        return ans;
    }

    int memoization(int x, int y, int &m, int &n, vector<vector<int> >& obs, vector<vector<int> >& dp)
    {
        if (x == m - 1 && y == n - 1) {
            return 1;
        }

        if (x >= m || y >= n || obs[x][y] == 1) {
            return 0;
        }

        if (dp[x][y] != -1) {
            return dp[x][y];
        }

        int ans = memoization(x + 1, y, m, n, obs, dp);
        ans += memoization(x, y + 1, m, n, obs, dp);

        return dp[x][y] = ans;
    }

    int tabulation(int m, int n, vector<vector<int> >& obs)
    {
        vector<vector<long long> > dp(m + 1, vector<long long>(n + 1, 0));
        dp[m - 1][n - 1] = 1;

        for (int x = m - 1; x >= 0; x--)
        {
            for (int y = n - 1; y >= 0; y--)
            {
                if (x == m - 1 && y == n - 1) {
                    continue;
                }
                else if (obs[x][y] == 1)
                {
                    dp[x][y] = 0;
                    continue;
                }

                long long ans = dp[x + 1][y];
                ans += dp[x][y + 1];

                dp[x][y] = ans;
            }
        }

        return dp[0][0];
    }

    int spaceOpt(int m, int n, vector<vector<int> >& obs)
    {
        vector<long long> next(n + 1, 0);
        vector<long long> curr(n + 1, 0);
        curr[n - 1] = 1;

        for (int x = m - 1; x >= 0; x--)
        {
            for (int y = n - 1; y >= 0; y--)
            {
                if (x == m - 1 && y == n - 1) {
                    continue;
                }
                else if (obs[x][y] == 1)
                {
                    curr[y] = 0;
                    continue;
                }

                long long ans = next[y];
                ans += curr[y + 1];

                curr[y] = ans;
            }

            next = curr;
        }

        return next[0];
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obs) {
        int m = obs.size(), n = obs[0].size();

        if (obs[m - 1][n - 1] == 1) {
            return 0;
        }

        // int ans = recur(0, 0, m, n, obs);

        // vector<vector<int> > dp(m, vector<int>(n, -1));

        // int ans = memoization(0, 0, m, n, obs, dp);

        // int ans = tabulation(m, n, obs);

        int ans = spaceOpt(m, n, obs);

        return ans;
    }
};
