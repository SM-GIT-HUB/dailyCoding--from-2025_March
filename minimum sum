class Solution {
  public:
    string getNum(string &one, string &two)
    {
        int i = one.size() - 1;
        int j = two.size() - 1;
        
        int sum = 0;
        int carry = 0;
        
        string curr = "";
        
        while (i >= 0 && j >= 0)
        {
            sum = carry + (one[i--] - '0') + (two[j--] - '0');
            curr.push_back(sum % 10 + '0');
            carry = sum / 10;
        }
        
        while (i >= 0)
        {
            sum = carry + (one[i--] - '0');
            curr.push_back(sum % 10 + '0');
            carry = sum / 10;
        }
        
        while (j >= 0)
        {
            sum = carry + (one[j--] - '0');
            curr.push_back(sum % 10 + '0');
            carry = sum / 10;
        }
        
        if (carry) curr.push_back(carry + '0');
        
        while (curr.size() && curr.back() == '0') curr.pop_back();
        
        reverse(curr.begin(), curr.end());
        return curr;
    }
  
    string minSum(vector<int> &arr) {
        // code here
        unordered_map<int, int> mapp;
        
        for (int x : arr)
        {
            mapp[x]++;
        }
        
        string one, two;
        
        int num = 0;
        int count = 0;
        int n = arr.size();
        
        while (count < n)
        {
            while (mapp[num] == 0) num++;
            
            mapp[num]--;
            one.push_back(num + '0');
            
            count++;
            
            if (count == n) break;
            
            while (mapp[num] == 0) num++;
            
            mapp[num]--;
            two.push_back(num + '0');
            
            count++;
        }
        
        return getNum(one, two);
    }
};
