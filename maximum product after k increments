class Solution {
public:
    int maximumProduct(vector<int>& arr, int k) {
        int mod = 1e9 + 7;
        sort(arr.begin(), arr.end());

        int idx = 0;
        int n = arr.size();

        while (idx < n - 1 && k)
        {
            if (arr[idx] == arr[idx + 1])
            {
                idx++;
                continue;
            }

            long long diff = (long long)(arr[idx + 1] - arr[idx]) * (idx + 1);

            if (k >= diff)
            {
                for (int i = 0; i <= idx; i++) arr[i] = arr[idx + 1];
                k -= diff;
                idx++;
            }
            else
            {
                int add = k / (idx + 1);
                k = k % (idx + 1);

                if (add) {
                    for (int i = 0; i <= idx; i++) arr[i] += add;
                }
                
                if (k) {
                    for (int i = 0; i < k; i++) arr[i]++;
                }

                k = 0;
            }
        }

        if (k)
        {
            int add = k / n;
            k = k % n;

            if (add) {
                for (int i = 0; i < n; i++) arr[i] += add;
            }
            
            if (k) {
                for (int i = 0; i < k; i++) arr[i]++;
            }
        }

        long long ans = 1;
        for (int x : arr) ans = (ans * x) % mod;

        return ans;
    }
};
