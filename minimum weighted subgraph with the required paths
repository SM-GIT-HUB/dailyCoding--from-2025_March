class Solution {
public:
    void dijkstra(int src, vector<long long>& dist, vector<vector<pair<int, int> > >& adj)
    {
        priority_queue<pair<long long, int>, vector<pair<long long, int> >, greater<pair<long long, int> > > pq;

        dist[src] = 0;
        pq.push({0, src});

        while (!pq.empty())
        {
            int node = pq.top().second;
            long long currDist = pq.top().first;
            pq.pop();

            if (dist[node] < currDist) continue;

            for (auto &ad : adj[node])
            {
                if (currDist + ad.second < dist[ad.first])
                {
                    dist[ad.first] = ad.second + currDist;
                    pq.push({dist[ad.first], ad.first});
                }
            }
        }
    }

    long long minimumWeight(int n, vector<vector<int>>& edges, int src1, int src2, int dest) {
        vector<vector<pair<int, int> > > adj(n);

        for (auto &e : edges)
        {
            adj[e[0]].push_back({e[1], e[2]});
        }

        long long inf = 1e15;

        vector<long long> dist1(n, inf);
        vector<long long> dist2(n, inf);
        vector<long long> distTs(n, inf);

        dijkstra(src1, dist1, adj);
        dijkstra(src2, dist2, adj);

        adj.assign(n, vector<pair<int, int> >());

        for (auto &e : edges)
        {
            adj[e[1]].push_back({e[0], e[2]});
        }

        dijkstra(dest, distTs, adj);

        long long ans = inf;

        for (int k = 0; k < n; k++)
        {
            if (dist1[k] != inf && dist2[k] != inf && distTs[k] != inf) {
                ans = min(ans, dist1[k] + dist2[k] + distTs[k]);
            }
        }

        return (ans == inf)? -1 : ans;
    }
};
