#include<bits/stdc++.h>

bitset<101> visited;

int bfs(int rm, vector<int>& ini, vector<vector<int> >& adj)
{
	queue<int> q;
	visited.reset();
	
	for (int node : ini)
	{
		visited[node] = 1;
		if (node != rm) q.push(node);
	}

	while (!q.empty())
	{
		int node = q.front();
		q.pop();

		for (int adjNode : adj[node])
		{
			if (!visited[adjNode])
			{
				q.push(adjNode);
				visited[adjNode] = 1;
			}
		}
	}

	return visited.count();
}

int minMalwareSpread(vector<vector<int> >& graph, vector<int>& initial)
{
	// Write your code here
	int n = graph.size();
	int m = initial.size();
	vector<vector<int> > adj(n);

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (i == j || !graph[i][j]) continue;
			adj[i].push_back(j);
		}
	}

	int ans = n;
	int maxi = n;

	for (int rm : initial)
	{
		int curr = bfs(rm, initial, adj);

		if (curr < maxi || (curr == maxi && rm < ans))
		{
			ans = rm;
			maxi = curr;
		}
	}

	return ans;
}
