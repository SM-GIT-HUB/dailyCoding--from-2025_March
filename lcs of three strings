class Solution {
  public:
    int memoization(int i, int j, int k, int &m, int &n, int &p, string &s1, string &s2, string &s3, vector<vector<vector<int> > >& dp)
    {
        if (i >= m || j >= n || k >= p) {
            return 0;
        }
        
        if (dp[i][j][k] != -1) {
            return dp[i][j][k];
        }
        
        int ans = 0;
        
        if (s1[i] == s2[j] && s2[j] == s3[k]) {
            ans = 1 + memoization(i + 1, j + 1, k + 1, m, n, p, s1, s2, s3, dp);
        }
        else
        {
            int iAns = memoization(i + 1, j, k, m, n, p, s1, s2, s3, dp);
            int jAns = memoization(i, j + 1, k, m, n, p, s1, s2, s3, dp);
            int kAns = memoization(i, j, k + 1, m, n, p, s1, s2, s3, dp);
            
            ans = max(iAns, max(jAns, kAns));
        }
        
        return dp[i][j][k] = ans;
    }
    
    int spaceOpt(int m, int n, int p, string &s1, string &s2, string &s3)
    {
        vector<vector<int> > next(n + 1, vector<int>(p + 1, 0));
        vector<vector<int> > curr(n + 1, vector<int>(p + 1, 0));
        
        for (int i = m - 1; i >= 0; i--)
        {
            for (int j = n - 1; j >= 0; j--)
            {
                for (int k = p - 1; k >= 0; k--)
                {
                    int ans = 0;
                    
                    if (s1[i] == s2[j] && s2[j] == s3[k]) {
                        ans = 1 + next[j + 1][k + 1];
                    }
                    else
                    {
                        int iAns = next[j][k];
                        int jAns = curr[j + 1][k];
                        int kAns = curr[j][k + 1];
                        
                        ans = max(iAns, max(jAns, kAns));
                    }
                    
                    curr[j][k] = ans;
                }
            }
            
            next = curr;
        }
        
        return next[0][0];
    }
  
    int lcsOf3(string& s1, string& s2, string& s3) {
        // Code here
        int m = s1.size();
        int n = s2.size();
        int p = s3.size();
        
        // vector<vector<vector<int> > > dp(m, vector<vector<int> >(n, vector<int>(p, -1)));
        
        // int ans = memoization(0, 0, 0, m, n, p, s1, s2, s3, dp);
        
        int ans = spaceOpt(m, n, p, s1, s2, s3);
        
        return ans;
    }
};
