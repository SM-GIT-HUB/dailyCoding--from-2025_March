#include <bits/stdc++.h> 

int memoization(int x, int y, int m, int n, vector<vector<int> >& mat, vector<vector<int> >& dp)
{
    if (x >= m || y >= n) {
        return 0;
    }

    if (dp[x][y] != -1) {
        return dp[x][y];
    }

    auto check = [&](int xi, int yi) {
        return (xi < m && yi < n && mat[x][y] < mat[xi][yi]);
    };

    int downAns = 0;
    int rightAns = 0;

    if (check(x + 1, y)) {
        downAns = memoization(x + 1, y, m, n, mat, dp);
    }

    if (check(x, y + 1)) {
        rightAns = memoization(x, y + 1, m, n, mat, dp);
    }

    return dp[x][y] = 1 + max(rightAns, downAns);
}

int spaceOpt(int m, int n, vector<vector<int> >& mat)
{
    vector<int> next(n + 1, 0);
    vector<int> curr(n + 1, 0);

    for (int x = m - 1; x >= 0; x--)
    {
        for (int y = n - 1; y >= 0; y--)
        {
            auto check = [&](int xi, int yi) {
                return (xi < m && yi < n && mat[x][y] < mat[xi][yi]);
            };

            int downAns = 0;
            int rightAns = 0;

            if (check(x + 1, y)) {
                downAns = next[y];
            }

            if (check(x, y + 1)) {
                rightAns = curr[y + 1];
            }

            curr[y] = 1 + max(rightAns, downAns);
        }

        swap(next, curr);
    }

    return next[0];
}

int longestIncreasingPath(vector<vector<int> >& mat, int m, int n)
{
    // Write your code here
    // vector<vector<int> > dp(m, vector<int>(n, -1));

    // int ans = memoization(0, 0, m, n, mat, dp);

    int ans = spaceOpt(m, n, mat);

    return ans;
}
