#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
using Node = TreeNode<int>;

Node* getPred(Node* curr)
{
    Node* temp = curr->left;

    while (temp->right && temp->right != curr)
    {
        temp = temp->right;
    }

    return temp;
}

int medianBST(TreeNode<int>* root) 
{
    // Write your code here.
    int n = 0;
    Node* curr = root;

    while (curr)
    {
        if (!curr->left)
        {
            n++;
            curr = curr->right;
        }
        else
        {
            Node* pred = getPred(curr);

            if (pred->right == curr)
            {
                pred->right = nullptr;
                curr = curr->right;
                n++;
            }
            else
            {
                pred->right = curr;
                curr = curr->left;
            }
        }
    }

    int c = 0;
    int even = ((n & 1) == 0);

    int ans = 0;
    curr = root;

    while (curr && c <= n / 2)
    {
        if (!curr->left)
        {
            if (c == n / 2) {
                ans += curr->data;
            }
            else if (even && c == n / 2 - 1) {
                ans += curr->data;
            }

            c++;
            curr = curr->right;
        }
        else
        {
            Node* pred = getPred(curr);

            if (pred->right == curr)
            {
                if (c == n / 2) {
                    ans += curr->data;
                }
                else if (even && c == n / 2 - 1) {
                    ans += curr->data;
                }

                pred->right = nullptr;
                curr = curr->right;
                c++;
            }
            else
            {
                pred->right = curr;
                curr = curr->left;
            }
        }
    }

    return even? ans / 2 : ans;
}
