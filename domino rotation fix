class Solution {
public:
    int getAns(int cand1, int cand2, int n, vector<int>& tops, vector<int>& bottoms)
    {
        int ans1 = 0;
        int ans2 = 0;

        bool flag1 = 0;
        bool flag2 = 0;

        for (int index = 0; index < n; index++)
        {
            if (flag1 || tops[index] == cand1) {}
            else if (bottoms[index] == cand1) {
                ans1++;
            }
            else
            {
                ans1 = INT_MAX;
                flag1 = 1;
            }

            if (flag2 || tops[index] == cand2) {}
            else if (bottoms[index] == cand2) {
                ans2++;
            }
            else
            {
                ans2 = INT_MAX;
                flag2 = 1;
            }
        }

        return min(ans1, ans2);
    }

    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        int n = tops.size();

        int cand1 = tops[0];
        int cand2 = bottoms[0];

        int ans1 = getAns(cand1, cand2, n, tops, bottoms);
        int ans2 = getAns(cand1, cand2, n, bottoms, tops);
        
        int ans = min(ans1, ans2);

        return (ans == INT_MAX)? -1 : ans;
    }
};
