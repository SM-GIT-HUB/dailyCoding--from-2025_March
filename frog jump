
class Solution {
  public:
    int recur(int n, vector<int>& height)
    {
        if (n == 0) {
            return 0;
        }
        else if (n == 1) {
            return abs(height[1] - height[0]);
        }
        
        int cost1 = recur(n - 1, height) + abs(height[n] - height[n - 1]);
        int cost2 = recur(n - 2, height) + abs(height[n] - height[n - 2]);
        
        return min(cost1, cost2);
    }
    
    int memoization(int n, vector<int>& height, vector<int>& dp)
    {
        if (n == 0) {
            return 0;
        }
        else if (n == 1) {
            return abs(height[1] - height[0]);
        }
        
        if (dp[n] != -1) {
            return dp[n];
        }
        
        int cost1 = memoization(n - 1, height, dp) + abs(height[n] - height[n - 1]);
        int cost2 = memoization(n - 2, height, dp) + abs(height[n] - height[n - 2]);
        
        return dp[n] = min(cost1, cost2);
    }
    
    int tabulation(int n, vector<int>& height)
    {
        vector<int> dp(n + 1, 0);
        dp[0] = 0;
        dp[1] = abs(height[1] - height[0]);
        
        for (int i = 2; i <= n; i++)
        {
            int cost1 = dp[i - 1] + abs(height[i] - height[i - 1]);
            int cost2 = dp[i - 2] + abs(height[i] - height[i - 2]);
            
            dp[i] = min(cost1, cost2);
        }
        
        return dp[n];
    }
    
    int spaceOpt(int n, vector<int>& height)
    {
        int a = 0;
        int b = abs(height[1] - height[0]);
        int c = b;
        
        for (int i = 2; i <= n; i++)
        {
            int cost1 = b + abs(height[i] - height[i - 1]);
            int cost2 = a + abs(height[i] - height[i - 2]);
            
            c = min(cost1, cost2);
            
            a = b;
            b = c;
        }
        
        return c;
    }
  
    int minCost(vector<int>& height) {
        // Code here
        int n = height.size();
        // int ans = recur(n - 1, height);
        
        // vector<int> dp(n, -1);
        
        // int ans = memoization(n - 1, height, dp);
        
        if (n == 1) {
            return 0;
        }
        
        // int ans = tabulation(n - 1, height);
        
        int ans = spaceOpt(n - 1, height);
        
        return ans;
    }
};
