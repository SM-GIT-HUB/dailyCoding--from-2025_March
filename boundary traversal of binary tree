/************************************************************

    Following is the Binary Tree node structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode()
        {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

void leftDfs(TreeNode<int>* root, vector<int>& ans)
{
    if (!root) return;
    if (!root->left && !root->right) return;

    ans.push_back(root->data);

    if (root->left) leftDfs(root->left, ans);
    else leftDfs(root->right, ans);
}

void leafDfs(TreeNode<int>* root, vector<int>& ans)
{
    if (!root) return;

    if (!root->left && !root->right)
    {
        ans.push_back(root->data);
        return;
    }

    leafDfs(root->left, ans);
    leafDfs(root->right, ans);
}

void rightDfs(TreeNode<int>* root, vector<int>& ans)
{
    if (!root) return;
    if (!root->left && !root->right) return;

    if (root->right) rightDfs(root->right, ans);
    else rightDfs(root->left, ans);

    ans.push_back(root->data);
}

vector<int> traverseBoundary(TreeNode<int>* root)
{
	// Write your code here.
    vector<int> ans = {root->data};

    leftDfs(root->left, ans);
    leafDfs(root->left, ans);
    leafDfs(root->right, ans);
    rightDfs(root->right, ans);

    return ans;
}
