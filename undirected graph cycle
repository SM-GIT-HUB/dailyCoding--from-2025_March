class Solution {
  public:
    int dfs(int node, int parent, vector<int>& visited, vector<vector<int> >& adj)
    {
        visited[node] = 1;
        
        for (int adjNode : adj[node])
        {
            if (!visited[adjNode]) {
                if (dfs(adjNode, node, visited, adj)) return 1;
            }
            else if (adjNode != parent) {
                return 1;
            }
        }
        
        return 0;
    }
  
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<vector<int> > adj(V);
        
        for (auto &e : edges)
        {
            int u = e[0], v = e[1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        vector<int> visited(V);
        
        for (int node = 0; node < V; node++)
        {
            if (!visited[node] && dfs(node, -1, visited, adj)) return 1;
        }
        
        return 0;
    }
};
