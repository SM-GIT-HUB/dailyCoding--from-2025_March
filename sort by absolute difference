class Solution {
  public:
    int comp(int a, int b, int x)
    {
        int absa = abs(a - x);
        int absb = abs(b - x);
        
        if (absa < absb) return -1;
        else if (absa > absb) return 1;
        else return 0;
    }
    
    void merge(int start, int mid, int end, int x, vector<int>& arr)
    {
        vector<int> merged;
        int i = start, j = mid + 1;
        
        while (i <= mid && j <= end)
        {
            int absv = comp(arr[i], arr[j], x);
            
            if (absv < 1) merged.push_back(arr[i++]);
            else merged.push_back(arr[j++]);
        }
        
        while (i <= mid)
        {
            merged.push_back(arr[i++]);
        }
        
        while (j <= end)
        {
            merged.push_back(arr[j++]);
        }
        
        for (int x : merged) arr[start++] = x;
    }
  
    void mergeSort(int start, int end, int x, vector<int>& arr)
    {
        if (start >= end) return;
        
        int mid = start + (end - start) / 2;
        
        mergeSort(start, mid, x, arr);
        mergeSort(mid + 1, end, x, arr);
        merge(start, mid, end, x, arr);
    }
  
    void rearrange(vector<int> &arr, int x) {
        // code here
        mergeSort(0, arr.size() - 1, x, arr);
    }
};
