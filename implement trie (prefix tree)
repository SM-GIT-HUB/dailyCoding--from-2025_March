class Trie {
    struct Node {
        bool isTerminal;
        Node* children[26];

        Node()
        {
            isTerminal = false;

            for (int i = 0; i < 26; i++)
            {
                children[i] = nullptr;
            }
        }
    };
public:
    Node* root = nullptr;

    Trie() {
        root = new Node();
    }
    
    void insert(string word) {
        Node* curr = root;
        int index = 0;

        for (char x : word)
        {
            index = x - 'a';

            if (!curr->children[index]) {
                curr->children[index] = new Node();
            }

            curr = curr->children[index];
        }

        curr->isTerminal = true;
    }
    
    bool search(string word) {
        Node* curr = root;
        int index = 0;

        for (char x : word)
        {
            index = x - 'a';

            if (!curr->children[index]) {
                return false;
            }

            curr = curr->children[index];
        }

        return (curr->isTerminal == true);
    }
    
    bool startsWith(string prefix) {
        Node* curr = root;
        int index = 0;

        for (char x : prefix)
        {
            index = x - 'a';

            if (!curr->children[index]) {
                return false;
            }

            curr = curr->children[index];
        }

        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
