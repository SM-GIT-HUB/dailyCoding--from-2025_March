class Solution {
public:
    int recur(int x, int y, int &m, int &n, vector<vector<int> >& grid)
    {
        if (x == m - 1 && y == n - 1) {
            return grid[x][y];
        }
        else if (x >= m || y >= n) {
            return 1e7;
        }

        int right = recur(x, y + 1, m, n, grid);
        int down = recur(x + 1, y, m, n, grid);

        return grid[x][y] + min(right, down);
    }
    
    int memoization(int x, int y, int &m, int &n, vector<vector<int> >& grid, vector<vector<int> >& dp)
    {
        if (x == m - 1 && y == n - 1) {
            return grid[x][y];
        }
        else if (x >= m || y >= n) {
            return 1e7;
        }

        if (dp[x][y] != -1) {
            return dp[x][y];
        }

        int right = memoization(x, y + 1, m, n, grid, dp);
        int down = memoization(x + 1, y, m, n, grid, dp);

        return dp[x][y] = grid[x][y] + min(right, down);
    }

    int tabulation(int m, int n, vector<vector<int> >& grid)
    {
        vector<vector<int> > dp(m + 1, vector<int>(n + 1, 1e7));

        for (int x = m - 1; x >= 0; x--)
        {
            for (int y = n - 1; y >= 0; y--)
            {
                if (x == m - 1 && y == n - 1)
                {
                    dp[x][y] = grid[x][y];
                    continue;
                }

                int right = dp[x][y + 1];
                int down = dp[x + 1][y];

                dp[x][y] = grid[x][y] + min(right, down);
            }
        }

        return dp[0][0];
    }

    int spaceOpt(int m, int n, vector<vector<int> >& grid)
    {
        vector<int> next(n + 1, 1e7);
        vector<int> curr(n + 1, 1e7);

        for (int x = m - 1; x >= 0; x--)
        {
            for (int y = n - 1; y >= 0; y--)
            {
                if (x == m - 1 && y == n - 1)
                {
                    curr[y] = grid[x][y];
                    continue;
                }

                int right = curr[y + 1];
                int down = next[y];

                curr[y] = grid[x][y] + min(right, down);
            }

            next = curr;
        }

        return next[0];
    }

    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        // int ans = recur(0, 0, m, n, grid);

        // vector<vector<int> > dp(m, vector<int>(n, -1));

        // int ans = memoization(0, 0, m, n, grid, dp);

        // int ans = tabulation(m, n, grid);

        int ans = spaceOpt(m, n, grid);

        return ans;
    }
};
