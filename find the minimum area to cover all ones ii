class Solution {
public:
    int miniArea(int t, int b, int l, int r, vector<vector<int> >& grid) {
        int flag = 0;
        int up = -1, down = -1, left = grid[0].size(), right = -1;

        for (int i = t; i <= b; i++)
        {
            for (int j = l; j <= r; j++)
            {
                if (grid[i][j])
                {
                    flag = 1;
                    if (up == -1) up = i;
                    if (i > down) down = i;
                    if (j < left) left = j;
                    if (j > right) right = j;
                }
            }
        }
        
        return (flag)? (down - up + 1) * (right - left + 1) : 0;
    }

    int getArea(vector<vector<int> >& grid)
    {
        int m = grid.size();
        int n = grid[0].size();

        int area = m * n;

        for (int i = 0; i + 1 < m; i++)
        {
            int a1 = miniArea(0, i, 0, n - 1, grid);
            int a2 = miniArea(i + 1, m - 1, 0, n - 1, grid);

            for (int j = 0; j + 1 < n; j++)
            {
                area = min(area, a1 + miniArea(i + 1, m - 1, 0, j, grid) + miniArea(i + 1, m - 1, j + 1, n - 1, grid));
                area = min(area, miniArea(0, i, 0, j, grid) + miniArea(0, i, j + 1, n - 1, grid) + a2);
            }
        }

        for (int i = 0; i + 2 < m; i++)
        {
            int a = miniArea(0, i, 0, n - 1, grid);

            for (int j = i + 1; j + 1 < m; j++)
            {
                area = min(area, a + miniArea(i + 1, j, 0, n - 1, grid) + miniArea(j + 1, m - 1, 0, n - 1, grid));
            }
        }

        for (int j = 0; j + 1 < n; j++)
        {
            int a1 = miniArea(0, m - 1, 0, j, grid);
            int a2 = miniArea(0, m - 1, j + 1, n - 1, grid);

            for (int i = 0; i + 1 < m; i++)
            {
                area = min(area, a1 + miniArea(0, i, j + 1, n - 1, grid) + miniArea(i + 1, m - 1, j + 1, n - 1, grid));
                area = min(area, miniArea(0, i, 0, j, grid) + miniArea(i + 1, m - 1, 0, j, grid) + a2);
            }
        }
        
        for (int j = 0; j + 2 < n; j++)
        {
            int a = miniArea(0, m - 1, 0, j, grid);

            for (int i = j + 1; i + 1 < n; i++)
            {
                area = min(area, a + miniArea(0, m - 1, j + 1, i, grid) + miniArea(0, m - 1, i + 1, n - 1, grid));
            }
        }

        return area;
    }

    int minimumSum(vector<vector<int>>& grid) {
        ios_base::sync_with_stdio(false);
        int ans = getArea(grid);

        return ans;
    }
};
