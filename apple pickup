#include <bits/stdc++.h>

int dp[105][51][51];

int memoization(int x1, int x2, int n, int k, vector<vector<int> >& mat)
{
    int y1 = k - x1;
    int y2 = k - x2;

    if (x1 == n - 1 && y1 == n - 1 && x2 == n - 1 && y2 == n - 1) return mat[x1][y1];

    if (dp[k][x1][x2] != -1) return dp[k][x1][x2];

    auto check = [&](int x, int y) {
        return (x < n && y < n && mat[x][y] != -1);
    };

    int apples = (x1 == x2)? mat[x1][y1] : mat[x1][y1] + mat[x2][y2];

    int rr = 0, rd = 0, dr = 0, dd = 0;

    if (check(x1, y1 + 1))
    {
        rr = (check(x2, y2 + 1))? memoization(x1, x2, n, k + 1, mat) : -1e5;
        rd = (check(x2 + 1, y2))? memoization(x1, x2 + 1, n, k + 1, mat) : -1e5;
    }
    else
        rr = rd = -1e5;

    if (check(x1 + 1, y1))
    {
        dr = (check(x2, y2 + 1))? memoization(x1 + 1, x2, n, k + 1, mat) : -1e5;
        dd = (check(x2 + 1, y2))? memoization(x1 + 1, x2 + 1, n, k + 1, mat) : -1e5;
    }
    else
        dr = dd = -1e5;

    return dp[k][x1][x2] = apples + max(max(rr, rd), max(dr, dd));
}

int collectApples(vector<vector<int> >& mat) 
{
    // Write your code here.
    int n = mat.size();
    memset(dp, -1, sizeof(dp));

    if (mat[0][0] == -1 || mat[n - 1][n - 1] == -1) return 0;

    return max(memoization(0, 0, n, 0, mat), 0);
}
