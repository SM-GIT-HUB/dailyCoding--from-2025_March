class Solution {
  public:
    int comp(int *mapp1, int *mapp2)
    {
        for (int i = 0; i < 26; i++)
        {
            if (mapp1[i] < mapp2[i]) return 0;
        }
        
        return 1;
    }
  
    string smallestWindow(string &s, string &p) {
        // code here
        int n = s.size();
        
        int mappS[26] = {0};
        int mappP[26] = {0};
        
        for (char x : p) mappP[x - 'a']++;
        
        int idx = -1;
        int len = 1e7;
        
        int start = 0;
        
        for (int end = 0; end < n; end++)
        {
            mappS[s[end] - 'a']++;
            
            while (comp(mappS, mappP))
            {
                int currLen = end - start + 1;
                
                if (currLen < len)
                {
                    idx = start;
                    len = currLen;
                }
                
                mappS[s[start++] - 'a']--;
            }
        }
        
        if (idx == -1) return "";
        return s.substr(idx, len);
    }
};
