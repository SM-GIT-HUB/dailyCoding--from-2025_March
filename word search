class Solution {
    int dirs[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
  public:
    int getAns(int x, int y, int m, int n, int index, string &word, vector<vector<char> >& mat, vector<vector<int> >& visited)
    {
        if (index == word.size()) {
            return 1;
        }
        
        auto check = [&](int x, int y) {
            return (x >= 0 && x < m && y >= 0 && y < n && word[index] == mat[x][y] && !visited[x][y]);
        };
        
        visited[x][y] = 1;
        
        for (int i = 0; i < 4; i++)
        {
            int newX = x + dirs[i][0];
            int newY = y + dirs[i][1];
            
            if (check(newX, newY) && getAns(newX, newY, m, n, index + 1, word, mat, visited)) {
                return 1;
            }
        }
        
        visited[x][y] = 0;
        return 0;
    }
  
    bool isWordExist(vector<vector<char>>& mat, string& word) {
        // Code here
        int m = mat.size();
        int n = mat[0].size();
        
        vector<vector<int> > visited(m, vector<int>(n, 0));
        
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (mat[i][j] == word[0] && getAns(i, j, m, n, 1, word, mat, visited)) {
                    return 1;
                }
            }
        }
        
        return 0;
    }
};
