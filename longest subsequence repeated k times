class Solution {
public:
    int check(string &curr, string &chars, int k)
    {
        int i = 0;

        for (char x : chars)
        {
            if (curr[i] == x) i++;

            if (i == curr.size())
            {
                i = 0;
                k--;

                if (k == 0) return 1;
            }
        }

        return 0;
    }

    void dfs(string &curr, string &ans, string& chars, int &k, int *mapp)
    {
        if (!check(curr, chars, k)) return;
        if (curr.size() > ans.size()) ans = curr;

        for (char ch = 'z'; ch >= 'a'; ch--)
        {
            if (mapp[ch - 'a'] >= k)
            {
                mapp[ch - 'a'] -= k;
                curr.push_back(ch);
                dfs(curr, ans, chars, k, mapp);
                curr.pop_back();
                mapp[ch - 'a'] += k;
            }
        }
    }

    string longestSubsequenceRepeatedK(string s, int k) {
        int mapp[26] = {0};
        string chars;

        for (char x : s) mapp[x - 'a']++;

        for (char x : s)
        {
            if (mapp[x - 'a'] >= k) chars.push_back(x);
        }

        string ans;
        string curr;
        dfs(curr, ans, chars, k, mapp);

        return ans;
    }
};
