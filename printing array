#include<bits/stdc++.h>

void dfs(int node, unordered_set<int>& visited, map<int, vector<int> >& adj, vector<int>& ans)
{
    visited.insert(node);

    for (int adjNode : adj[node])
    {
        if (!visited.count(adjNode)) {
            dfs(adjNode, visited, adj, ans);
        }
    }

    ans.push_back(node);
}

vector<int> makeArray(int n, vector<vector<int> >& sb)
{
    // Write your code here
    map<int, vector<int> > adj;

    for (int i = 0; i < n; i++)
    {
        vector<int> &vec = sb[i];
        for (int j = 1; j < vec.size(); j++) adj[vec[j - 1]].push_back(vec[j]);
    }

    vector<int> ans;
    unordered_set<int> visited;

    for (auto &it : adj)
    {
        int node = it.first;

        if (!visited.count(node)) {
            dfs(node, visited, adj, ans);
        }
    }

    reverse(ans.begin(), ans.end());

    return ans;
}

