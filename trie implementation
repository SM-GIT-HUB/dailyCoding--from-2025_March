/*
Definition of TrieNode class.

class TrieNode {
public:
    TrieNode * children[26];
    bool isEnd;
    TrieNode()
    {
        isEnd=false;
        for(int i=0;i<26;i++)
            children[i]=NULL;
    }

};*/

class Trie {
public:
    TrieNode* root;

    Trie()
    {
        root = new TrieNode();
    }

    void insert(string &word)
    {
        TrieNode* curr = root;

        for (char x : word)
        {
            if (!curr->children[x - 'a']) {
                curr->children[x - 'a'] = new TrieNode();
            }

            curr = curr->children[x - 'a'];
        }

        curr->isEnd = 1;
    }

    int search(string &word)
    {
        TrieNode* curr = root;

        for (char x : word)
        {
            if (!curr->children[x - 'a']) return 0;
            curr = curr->children[x - 'a'];
        }

        return (curr->isEnd);
    }

    int startsWith(string &word)
    {
        TrieNode* curr = root;

        for (char x : word)
        {
            if (!curr->children[x - 'a']) return 0;
            curr = curr->children[x - 'a'];
        }

        if (curr->isEnd) return 1;

        for (int i = 0; i < 26; i++)
        {
            if (curr->children[i]) return 1;
        }

        return 0;
    }
};

Trie tr;

void solution::insert(string word)
{
    // Write your code here.
    tr.insert(word);
}

bool solution::search(string word)
{
    // Write your code here.
    return tr.search(word);
}

bool solution::startsWith(string word)
{
    // Write your code here.
    return tr.startsWith(word);
}
