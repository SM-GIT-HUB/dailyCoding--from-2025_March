/*
class Node {
public:
    int data;
    Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution {
  public:
    Node* getMid(Node* root)
    {
        Node* slow = root;
        Node* fast = root->next;
        
        while (fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return slow;
    }
    
    Node* merge(Node* one, Node* two)
    {
        Node* root = new Node(-1);
        Node* temp = root;
        
        while (one && two)
        {
            if (one->data <= two->data)
            {
                temp->next = one;
                one = one->next;
            }
            else
            {
                temp->next = two;
                two = two->next;
            }
            
            temp = temp->next;
        }
        
        if (one) temp->next = one;
        if (two) temp->next = two;
        
        return root->next;
    }
  
    Node* mergeSort(Node* root) {
        // code here
        if (!root || !root->next) return root;
        
        Node* mid = getMid(root);
        
        Node* two = mid->next;
        mid->next = nullptr;
        
        Node* one = mergeSort(root);
        two = mergeSort(two);
        
        return merge(one, two);
    }
};
