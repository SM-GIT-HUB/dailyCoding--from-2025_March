// User function Template for C++

class Solution {
  public:
    int memoization(int idx, int n, string &arr, vector<vector<int> >& isPalin, vector<int>& dp)
    {
        if (idx == n) return 0;
        if (dp[idx] != -1) return dp[idx];
        
        int ans = 1e4;
        
        for (int i = idx; i < n; i++)
        {
            if (isPalin[idx][i])
            {
                int curr = 1 + memoization(i + 1, n, arr, isPalin, dp);
                ans = min(ans, curr);
            }
        }
        
        return dp[idx] = ans;
    }
    
    int tabulation(int n, string &arr, vector<vector<int> >& isPalin)
    {
        vector<int> dp(n + 1, 0);
        
        for (int idx = n - 1; idx >= 0; idx--)
        {
            int ans = 1e4;
            
            for (int i = idx; i < n; i++)
            {
                if (isPalin[idx][i])
                {
                    int curr = 1 + dp[i + 1];
                    ans = min(ans, curr);
                }
            }
            
            dp[idx] = ans;
        }
        
        return dp[0];
    }
  
    int palPartition(string &s) {
        // code here
        int n = s.size();
        
        vector<vector<int> > isPalin(n, vector<int>(n, 0));
        
        for (int i = n - 1; i >= 0; i--)
        {
            isPalin[i][i] = 1;
            
            for (int j = i + 1; j < n; j++)
            {
                if (i + 1 == j)
                {
                    isPalin[i][j] = (s[i] == s[j]);
                    continue;
                }
                
                isPalin[i][j] = (s[i] == s[j] && isPalin[i + 1][j - 1]);
            }
        }
        
        if (isPalin[0][n - 1]) return 0;
        
        // vector<int> dp(n, -1);
        // return memoization(0, n, s, isPalin, dp) - 1;
        
        return tabulation(n, s, isPalin) - 1;
    }
};
