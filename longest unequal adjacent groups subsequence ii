class Solution {
public:
    int hamDist(string &a, string &b)
    {
        int dist = 0;

        for (int i = 0; i < a.size() && dist < 2; i++)
        {
            if (a[i] != b[i]) {
                dist++;
            }
        }

        return (dist == 1);
    }

    vector<string> getWordsInLongestSubsequence(vector<string>& words, vector<int>& groups) {
        int n = words.size();
        
        vector<int> dp(n, 1);
        vector<int> store(n, -1);

        int maxi = 0;

        for (int i = 1; i < n; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (groups[j] != groups[i] && words[j].size() == words[i].size() && hamDist(words[j], words[i]))
                {
                    if (dp[j] + 1 > dp[i])
                    {
                        store[i] = j;
                        dp[i] = dp[j] + 1;
                    }
                }
            }

            if (dp[i] > dp[maxi]) {
                maxi = i;
            }
        }

        int index = dp[maxi] - 1;
        vector<string> ans(dp[maxi]);

        for (int i = maxi; i != -1; i = store[i])
        {
            ans[index--] = words[i];
        }

        return ans;
    }
};
