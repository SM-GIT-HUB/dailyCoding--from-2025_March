class Solution {
  public:
    int dirs[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
  
    int memoization(int x, int y, int n, vector<vector<vector<int> > >& dp)
    {
        if (x == 3 && (y == 0 || y == 2)) return 0;
        if (n == 1) return 1;
        
        if (dp[x][y][n] != -1) return dp[x][y][n];
        
        auto check = [](int x, int y) {
            return (x >= 0 && x < 4 && y >= 0 && y < 3);
        };
        
        int ans = 0;
        
        for (int i = 1; i < n; i++)
        {
            for (auto &d : dirs)
            {
                int newX = x + d[0], newY = y + d[1];
                
                if (check(newX, newY)) {
                    ans += memoization(newX, newY, n - i, dp);
                }
            }
        }
        
        return dp[x][y][n] = (ans + 1);
    }
  
    int getCount(int n) {
        // code here
        int ans = 0;
        vector<vector<vector<int> > > dp(4, vector<vector<int> >(3, vector<int>(n + 1, -1)));

        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                ans += memoization(i, j, n, dp);
            }
        }
        
        return ans;
    }
};
