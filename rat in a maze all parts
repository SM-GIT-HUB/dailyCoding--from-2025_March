#include <bits/stdc++.h> 

bitset<11> visited[11];
int dirs[4][2] = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}};

void track(int x, int y, int n, vector<int>& output, vector<vector<int> >& maze, vector<vector<int> >& ans)
{
  output[x * n + y] = 1;

  if (x == n - 1 && y == n - 1)
  {
    ans.push_back(output);
    output[x * n + y] = 0;
    return;
  }

  visited[x][y] = 1;
  
  auto check = [&](int x, int y) {
    return (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y] && maze[x][y] == 1);
  };
  
  for (int i = 0; i < 4; i++)
  {
    int newX = x + dirs[i][0];
    int newY = y + dirs[i][1];
      
    if (check(newX, newY)) track(newX, newY, n, output, maze, ans);
  }
  
  visited[x][y] = 0;
  output[x * n + y] = 0;
}

vector<vector<int> > ratInAMaze(vector<vector<int> >& maze, int n){
  // Write your code here.
  vector<vector<int> > ans;
  vector<int> output(n * n, 0);

  for (int i = 0; i < 11; i++) visited[i].reset();

  if (!maze[0][0]) return ans;

  track(0, 0, n, output, maze, ans);

  return ans;
}
