
//User function Template for C++

struct Node {
    bool isTerminal;
    Node* children[26];

    Node()
    {
        isTerminal = false;

        for (int i = 0; i < 26; i++)
        {
            children[i] = nullptr;
        }
    }
};

class Trie {
public:
    Node* root = nullptr;
    
    Trie()
    {
        root = new Node();
    }
    
    void insert(string word)
    {
        Node* curr = root;
        int index = 0;

        for (char x : word)
        {
            index = x - 'a';

            if (!curr->children[index]) {
                curr->children[index] = new Node();
            }

            curr = curr->children[index];
        }

        curr->isTerminal = true;
    }
    
    void searchInto(Node* &curr, string &temp, string &ans)
    {
        if (temp.size() > ans.size()) {
            ans = temp;
        }
        
        if (temp.size() == ans.size() && temp < ans) {
            ans = temp;
        }
        
        for (int i = 0; i < 26; i++)
        {
            if (curr->children[i] && curr->children[i]->isTerminal)
            {
                temp.push_back(i + 'a');
                searchInto(curr->children[i], temp, ans);
                temp.pop_back();
            }
        }
    }
    
    void getString(string &ans)
    {
        for (int i = 0; i < 26; i++)
        {
            if (root->children[i] && root->children[i]->isTerminal)
            {
                string temp = string(1, i + 'a');
                searchInto(root->children[i], temp, ans);
            }
        }
    }
};

class Solution {
public:
    string longestString(vector<string> &words)
    {
        // code here
        Trie tr;
        string ans = "";
        
        for (auto &w : words)
        {
            tr.insert(w);
        }
        
        tr.getString(ans);
        
        return ans;
    }
};
