class Solution {
public:
    int isPos(int x, int y, int i, int j, vector<vector<int> >& sum)
    {
        int curr = sum[i][j];

        if (x >= 0) curr -= sum[x][j];
        if (y >= 0) curr -= sum[i][y];
        if (x >= 0 && y >= 0) curr += sum[x][y];

        return (curr == 0);
    }

    bool possibleToStamp(vector<vector<int>>& grid, int sh, int sw) {
        int m = grid.size();
        int n = grid[0].size();

        vector<vector<int> > sum(m, vector<int>(n, 0));
        vector<vector<int> > cover(m, vector<int>(n, 0));

        if (grid[0][0]) sum[0][0] = 1;

        for (int i = 1; i < m; i++) sum[i][0] = grid[i][0] + sum[i - 1][0];
        for (int j = 1; j < n; j++) sum[0][j] = grid[0][j] + sum[0][j - 1];

        for (int i = 1; i < m; i++)
        {
            for (int j = 1; j < n; j++)
            {
                sum[i][j] = grid[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
            }
        }

        int x = 0, y = 0;

        for (int i = sh - 1; i < m; i++)
        {
            for (int j = sw - 1; j < n; j++)
            {
                x = i - sh + 1;
                y = j - sw + 1;

                if (isPos(x - 1, y - 1, i, j, sum))
                {
                    cover[x][y]++;
                    if (j + 1 < n) cover[x][j + 1]--;
                    if (i + 1 < m) cover[i + 1][y]--;
                    if (i + 1 < m && j + 1 < n) cover[i + 1][j + 1]++;
                }
            }
        }

        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                sum[i][j] = cover[i][j];
                if (i > 0) sum[i][j] += sum[i - 1][j];
                if (j > 0) sum[i][j] += sum[i][j - 1];
                if (i > 0 && j > 0) sum[i][j] -= sum[i - 1][j - 1];

                if (!grid[i][j] && !sum[i][j]) return 0;
            }
        }

        return 1;
    }
};
