#include<bits/stdc++.h>

map<int, string> mapp = {
    {100, "hundred"}, {90, "ninety"}, {80, "eighty"}, {70, "seventy"},
    {60, "sixty"}, {50, "fifty"}, {40, "forty"}, {30, "thirty"},
    {20, "twenty"}, {19, "nineteen"}, {18, "eighteen"}, {17, "seventeen"},
    {16, "sixteen"}, {15, "fifteen"}, {14, "fourteen"}, {13, "thirteen"},
    {12, "twelve"}, {11, "eleven"}, {10, "ten"}, {9, "nine"},
    {8, "eight"}, {7, "seven"}, {6, "six"}, {5, "five"},
    {4, "four"}, {3, "three"}, {2, "two"}, {1, "one"}, {0, "zero"}
};

string getWord(int nums)
{
    if (mapp.count(nums)) {
        return mapp[nums];
    }
    
    string word = mapp[(nums / 10) * 10];
    int single = nums % 10;

    if (single > 0) {
        word += " " + mapp[single];
    }

    return word;
}

int getVowels(const string& s)
{
    int count = 0;

    for (char c : s)
    {
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
            count++;
        }
    }

    return count;
}

string stringPair(int n, vector<int>& num) {
    int D = 0;

    for (auto v : num)
    {
        string str = getWord(v);
        D += getVowels(str);
    }

    int pairs = 0;
    unordered_map<int, int> freq;

    for (int i = 0; i < n; i++)
    {
        int elem = D - num[i];

        if (freq[elem] > 0) {
            pairs += freq[elem];
        }

        freq[num[i]]++;
    }

    return getWord(pairs);
}
