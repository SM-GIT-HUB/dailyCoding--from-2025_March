
class Solution {
  public:
    int recur(int x, int y, int &m, int &n)
    {
        if (x == m - 1 && y == n - 1) {
            return 1;
        }
        else if (x >= m || y >= n) {
            return 0;
        }
        
        int ans = 0;
        ans += recur(x + 1, y, m, n);
        ans += recur(x, y + 1, m, n);
        
        return ans;
    }
    
    int memoization(int x, int y, int &m, int &n, vector<vector<int> >& dp)
    {
    	if (x == m - 1 && y == n - 1) {
    		return 1;
    	}
    	else if (x >= m || y >= n) {
    		return 0;
    	}
    
    	if (dp[x][y] != -1) {
    		return dp[x][y];
    	}
    	
    	int ans = 0;
    	ans += memoization(x + 1, y, m, n, dp);
    	ans += memoization(x, y + 1, m, n, dp);
    	
    	return dp[x][y] = ans;
    }
    
    int tabulation(int m, int n)
    {
        vector<vector<int> > dp(m + 1, vector<int>(n + 1, 0));
        dp[m - 1][n - 1] = 1;
        
        for (int x = m - 1; x >= 0; x--)
        {
            for (int y = n - 1; y >= 0; y--)
            {
                if (x == m - 1 && y == n - 1) {
                    continue;
                }
                
                int ans = 0;
                ans += dp[x + 1][y];
                ans += dp[x][y + 1];
                
                dp[x][y] = ans;
            }
        }
        
        return dp[0][0];
    }
    
    int spaceOpt(int m, int n)
    {
    	vector<int> next(n + 1, 0);
    	vector<int> curr(n + 1, 0);
    	curr[n - 1] = 1;
    	
    	for (int x = m - 1; x >= 0; x--)
    	{
    		if (x == m - 2) {
    			next[n - 1] = 1;
    		}
    		for (int y = n - 1; y >= 0; y--)
    		{
    			if (x == m - 1 && y == n - 1) {
    				continue;
    			}
    			
    			int ans = 0;
    			ans += next[y];
    			ans += curr[y + 1];
    			
    			curr[y] = ans;
    		}
    
    		next = curr;
    	}
    	
    	return next[0];
    }
  
    int numberOfPaths(int m, int n) {
        // Code Here
        // int ans = recur(0, 0, m, n);
        
        // vector<vector<int> > dp(m, vector<int>(n, -1));

        // int ans = memoization(0, 0, m, n, dp);
        
        // int ans = tabulation(m, n);
        
        int ans = spaceOpt(m, n);
        
        return ans;
    }
};
