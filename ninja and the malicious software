#include <bits/stdc++.h> 

class DSUsize {
public:
    vector<int> size;
    vector<int> parent;
    vector<int> infectedNodes;

    DSUsize(int n)
    {
        size.resize(n + 1, 1);
        parent.resize(n + 1);
        infectedNodes.resize(n + 1, 0);

        for (int i = 0; i < n; i++)
        {
            parent[i] = i;
        }
    }

    int findUltParent(int node)
    {
        if (parent[node] == node) {
            return node;
        }

        return parent[node] = findUltParent(parent[node]);
    }

    void unionBySize(int u, int v)
    {
        int uPar = findUltParent(u);
        int vPar = findUltParent(v);

        if (uPar == vPar) {
            return;
        }

        if (size[uPar] >= size[vPar])
        {
            parent[vPar] = uPar;
            size[uPar] += size[vPar];
        }
        else
        {
            parent[uPar] = vPar;
            size[vPar] += size[uPar];
        }
    }
};

int minimizeMalwareSpread(int n, vector<vector<int>> &g, int m, vector<int> &infected)
{
    // Write your code here.
    DSUsize ds(n);

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (g[i][j] == 1) {
                ds.unionBySize(i, j);
            }
        }
    }

    int ans = INT_MAX;
    int maxSaved = -1;

    for (int x : infected)
    {
        ds.infectedNodes[ds.findUltParent(x)]++;
        ans = min(ans, x);
    }

    for (int node : infected)
    {
        int root = ds.findUltParent(node);
        int saved = ds.size[root];

        if (ds.infectedNodes[root] == 1)
        {
            if (saved > maxSaved || (saved == maxSaved && node < ans))
            {
                maxSaved = saved;
                ans = node;
            }
        }
    }

    return ans;
}
