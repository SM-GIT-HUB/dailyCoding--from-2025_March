#include <bits/stdc++.h> 
void computePrefixSum(int m, int n, int k, vector<vector<int> >& mat, int prefixSum[100][100], bool &flag)
{
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			int top = (i > 0)? prefixSum[i - 1][j] : 0;
			int left = (j > 0)? prefixSum[i][j - 1] : 0;
			int topLeft = (i > 0 && j > 0)? prefixSum[i - 1][j - 1] : 0;
			prefixSum[i][j] = mat[i][j] + top + left - topLeft;

			if (mat[i][j] <= k) {
				flag = true;
			}
		}
	}
}

bool check(int side, int m, int n, int k, int prefixSum[100][100])
{
	for (int i = side - 1; i < m; i++)
	{
		for (int j = side - 1; j < n; j++)
		{
			int r = i - side;
			int c = j - side;

			int sum = prefixSum[i][j];
			
			if (r >= 0) {
				sum -= prefixSum[r][j];
			}

			if (c >= 0) {
				sum -= prefixSum[i][c];
			}

			if (r >= 0 && c >= 0) {
				sum += prefixSum[r][c];
			}

			if (sum <= k) {
				return true;
			}
		}
	}

	return false;
}

int largestSquareSubmatrix(vector<vector<int>> &mat, int m, int n, int k)
{
	// Write your code here.
	int prefixSum[100][100] = {0};
	bool flag = 0;
	computePrefixSum(m, n, k, mat, prefixSum, flag);

	if (!flag) {
		return 0;
	}

	int start = 1, end = min(m, n);
	int ans = 1;
	
	while (start <= end)
	{
		int mid = start + (end - start) / 2;

		if (check(mid, m, n, k, prefixSum))
		{
			ans = mid * mid;
			start = mid + 1;
		}
		else
			end = mid - 1;
	}

	return ans;
}
