class Solution {
public:
    int dirs[4][2] = {{-1, -1}, {-1, 1}, {1, 1}, {1, -1}};

    int dp[501][501][4][2];
    bitset<501> visited[501];

    int memoization(int x, int y, int m, int n, int turn, int req, int d, vector<vector<int> >& grid)
    {
        if (x >= m || y >= n) return 0;

        auto check = [&](int x, int y) {
            return (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && grid[x][y] == req);
        };

        if (dp[x][y][d][turn] != -1) return dp[x][y][d][turn];

        visited[x][y] = 1;

        int newX = x + dirs[d][0];
        int newY = y + dirs[d][1];

        int count = 0;

        if (check(newX, newY)) {
            count = memoization(newX, newY, m, n, turn, 2 - req, d, grid);
        }

        if (!turn)
        {
            int di = (d + 1) % 4;

            newX = x + dirs[di][0];
            newY = y + dirs[di][1];

            if (check(newX, newY)) {
                count = max(memoization(newX, newY, m, n, 1, 2 - req, di, grid), count);
            }
        }

        visited[x][y] = 0;
        return dp[x][y][d][turn] = (count + 1);
    }

    int lenOfVDiagonal(vector<vector<int> >& grid) {
        int m = grid.size();
        int n = grid[0].size();

        for (int i = 0; i < m; i++)
        {
            visited[i].reset();

            for (int j = 0; j < n; j++)
            {
                for (int di = 0; di < 4; di++)
                {
                    dp[i][j][di][0] = -1;
                    dp[i][j][di][1] = -1;
                }
            }
        }

        int ans = 0;

        auto check = [&](int x, int y, int req) {
            return (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && grid[x][y] == req);
        };

        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 1)
                {
                    if (!ans) ans = 1;

                    for (int d = 0; d < 4; d++)
                    {
                        int newX = i + dirs[d][0];
                        int newY = j + dirs[d][1];

                        if (check(newX, newY, 2))
                        {
                            int currAns = 1 + memoization(newX, newY, m, n, 0, 0, d, grid);
                            ans = max(currAns, ans);
                        }
                    }
                }
            }
        }

        return ans;
    }
};
