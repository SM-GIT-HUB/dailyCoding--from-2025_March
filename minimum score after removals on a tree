class Solution {
    int xorr = 0;
    int ans = 1e9;
public:
    void calculateXorMin(int &one, int &curr)
    {
        int curXorMin = max(one, max(curr, xorr ^ one ^ curr)) - min(one, min(curr, xorr ^ one ^ curr));
        ans = min(ans, curXorMin);
    }

    int dfs2(int node, int parent, int &ancs, int &one, vector<int>& arr, vector<vector<int> >& adj)
    {
        int curr = arr[node];

        for (int adjNode : adj[node])
        {
            if (adjNode != parent) curr = curr ^ dfs2(adjNode, node, ancs, one, arr, adj);
        }

        if (parent != ancs) calculateXorMin(one, curr);
        return curr;
    }

    int dfs(int node, int parent, vector<int>& arr, vector<vector<int> >& adj)
    {
        int curr = arr[node];

        for (int adjNode : adj[node])
        {
            if (adjNode != parent) curr = curr ^ dfs(adjNode, node, arr, adj);
        }

        if (parent != -1) dfs2(parent, node, node, curr, arr, adj);
        return curr;
    }

    int minimumScore(vector<int>& arr, vector<vector<int>>& edges) {
        for (int x : arr) xorr = xorr ^ x;

        vector<vector<int> > adj(arr.size());

        for (auto &e : edges)
        {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        dfs(0, -1, arr, adj);
        return ans;
    }
};
