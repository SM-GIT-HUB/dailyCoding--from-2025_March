#include <bits/stdc++.h> 

int dp[1001][1001];
int maxVal[1000][1000];

long long memoization(int idx, int n, int c, int k, vector<int>& arr)
{
    if (idx == n) return 1e9;
    if (c == k - 1) return maxVal[idx][n - 1];

    if (dp[idx][c] != -1) return dp[idx][c];

    long long ans = 1e9;

    for (int i = idx; i < n; i++)
    {
        ans = min(ans, maxVal[idx][i] + memoization(i + 1, n, c + 1, k, arr));
    }

    return dp[idx][c] = ans;
}

int subarrayMaximum(vector<int> &arr, int k){
    // Write your code here.
    int n = arr.size();
    memset(dp, -1, sizeof(dp));

    for (int i = n - 1; i >= 0; i--)
    {
        int maxi = 0;

        for (int j = i; j < n; j++)
        {
            maxi = max(arr[j], maxi);
            maxVal[i][j] = maxi;
        }
    }

    int ans = memoization(0, n, 0, k, arr);

    return ans;
}
