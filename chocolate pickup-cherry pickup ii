class Solution {
public:
    int recur(int x, int y1, int y2, int &m, int &n, vector<vector<int> >& grid)
    {
        if (x == m) {
            return 0;
        }

        int cell = (y1 == y2)? grid[x][y1] : grid[x][y1] + grid[x][y2];
        int maxi = INT_MIN;

        auto check = [&](int y1, int y2) {
            return (y1 >= 0 && y1 < n && y2 >= 0 && y2 < n);
        };

        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                if (check(y1 + i, y2 + j)) {
                    maxi = max(recur(x + 1, y1 + i, y2 + j, m, n, grid), maxi);
                }
            }
        }

        return (cell + maxi);
    }

    int memoization(int x, int y1, int y2, int &m, int &n, vector<vector<int> >& grid, vector<vector<vector<int> > >& dp)
    {
        if (x == m) {
            return 0;
        }

        if (dp[x][y1][y2] != -1) {
            return dp[x][y1][y2];
        }

        int cell = (y1 == y2)? grid[x][y1] : grid[x][y1] + grid[x][y2];
        int maxi = INT_MIN;

        auto check = [&](int y1, int y2) {
            return (y1 >= 0 && y1 < n && y2 >= 0 && y2 < n);
        };

        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                if (check(y1 + i, y2 + j)) {
                    maxi = max(memoization(x + 1, y1 + i, y2 + j, m, n, grid, dp), maxi);
                }
            }
        }

        return dp[x][y1][y2] = (cell + maxi);
    }

    int tabulation(int m, int n, vector<vector<int> >& grid)
    {
        vector<vector<vector<int> > > dp(m + 1, vector<vector<int> >(n, vector<int>(n, 0)));

        auto check = [&](int y1, int y2) {
            return (y1 >= 0 && y1 < n && y2 >= 0 && y2 < n);
        };

        for (int x = m - 1; x >= 0; x--)
        {
            for (int y1 = 0; y1 < n; y1++)
            {
                for (int y2 = 0; y2 < n; y2++)
                {
                    int cell = (y1 == y2)? grid[x][y1] : grid[x][y1] + grid[x][y2];
                    int maxi = INT_MIN;
                    
                    for (int i = -1; i <= 1; i++)
                    {
                        for (int j = -1; j <= 1; j++)
                        {
                            if (check(y1 + i, y2 + j)) {
                                maxi = max(memoization(x + 1, y1 + i, y2 + j, m, n, grid, dp), maxi);
                            }
                        }
                    }

                    dp[x][y1][y2] = cell + maxi;
                }
            }
        }

        return dp[0][0][n - 1];
    }

    int spaceOpt(int m, int n, vector<vector<int> >& grid)
    {
        vector<vector<int> > next(n, vector<int>(n, 0));
        vector<vector<int> > curr(n, vector<int>(n, 0));

        auto check = [&](int y1, int y2) {
            return (y1 >= 0 && y1 < n && y2 >= 0 && y2 < n);
        };

        for (int x = m - 1; x >= 0; x--)
        {
            for (int y1 = 0; y1 < n; y1++)
            {
                for (int y2 = 0; y2 < n; y2++)
                {
                    int cell = (y1 == y2)? grid[x][y1] : grid[x][y1] + grid[x][y2];
                    int maxi = INT_MIN;
                    
                    for (int i = -1; i <= 1; i++)
                    {
                        for (int j = -1; j <= 1; j++)
                        {
                            if (check(y1 + i, y2 + j)) {
                                maxi = max(next[y1 + i][y2 + j], maxi);
                            }
                        }
                    }

                    curr[y1][y2] = cell + maxi;
                }
            }

            swap(next, curr);
        }

        return next[0][n - 1];
    }

    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        // int ans = recur(0, 0, n - 1, m, n, grid);

        // vector<vector<vector<int> > > dp(m, vector<vector<int> >(n, vector<int>(n, -1)));
    
        // int ans = memoization(0, 0, n - 1, m, n, grid, dp);

        // int ans = tabulation(m, n, grid);

        int ans = spaceOpt(m, n, grid);

        return ans;
    }
};
