class Solution {
public:
    void getMinSum(int n, vector<long long>& left, vector<int>& arr)
    {
        long long sum = 0;
        int m = arr.size();

        priority_queue<int> pq;

        for (int i = 0; i < n; i++)
        {
            sum += arr[i];
            left[i] = sum;
            pq.push(arr[i]);
        }

        for (int i = n; i < m; i++)
        {
            if (pq.top() > arr[i])
            {
                sum -= pq.top();
                pq.pop();
                sum += arr[i];
                pq.push(arr[i]);
            }

            left[i] = sum;
        }
    }

    long long minimumDifference(vector<int>& arr) {
        int m = arr.size();
        int n = m / 3;

        vector<long long> leftMinSum(m);
        getMinSum(n, leftMinSum, arr);
        
        long long sum = 0;
        long long ans = 1e18;
        priority_queue<int, vector<int>, greater<int> > pq;

        for (int i = m - 1; i >= m - n; i--)
        {
            sum += arr[i];
            pq.push(arr[i]);
        }

        for (int i = m - n - 1; i >= n - 1; i--)
        {
            ans = min(ans, leftMinSum[i] - sum);

            if (pq.top() < arr[i])
            {
                sum -= pq.top();
                pq.pop();
                sum += arr[i];
                pq.push(arr[i]);
            }
        }

        return ans;
    }
};
