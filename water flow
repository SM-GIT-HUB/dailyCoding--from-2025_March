#include <bits/stdc++.h> 

const int dirs[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

void dfs(int x, int y, int &m, int &n, int val, vector<vector<int> >& a, vector<vector<int> >& mat)
{
    mat[x][y] |= val;

    auto check = [&](int x1, int y1) {
        return (x1 >= 0 && x1 < m && y1 >= 0 && y1 < n && mat[x1][y1] != mat[x][y] && a[x1][y1] >= a[x][y]);
    };

    for (auto &d : dirs)
    {
        int newX = x + d[0], newY = y + d[1];

        if (check(newX, newY)) {
            dfs(newX, newY, m, n, mat[x][y], a, mat);
        }
    }
}

vector<vector<int>> waterFlow(vector<vector<int>> &a, int m, int n) {
    // Write your code here.
    vector<vector<int> > ans;
    
    if (m == 1 && n == 1) {
        return {{0, 0}};
    }

    vector<vector<int> > mat(m, vector<int>(n, 0));

    for (int i = 0; i < m; i++)
    {
        dfs(i, 0, m, n, 1, a, mat);
        dfs(i, n - 1, m, n, 2, a, mat);
    }

    for (int j = 0; j < n; j++)
    {
        dfs(0, j, m, n, 1, a, mat);
        dfs(m - 1, j, m, n, 2, a, mat);
    }

    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (mat[i][j] == 3) {
                ans.push_back({i, j});
            }
        }
    }

    return ans;
}
