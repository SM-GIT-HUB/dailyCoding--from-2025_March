class Solution {
  public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        // Your code here
        
        auto comp = [](pair<int, int>& a, pair<int, int>& b) {
            int dis1 = a.first * a.first + a.second * a.second;
            int dis2 = b.first * b.first + b.second * b.second;
            
            return (dis1 < dis2);
        };
        
        priority_queue<pair<int, int>, vector<pair<int, int> >, decltype(comp)> pq(comp);
        
        for (auto &p : points)
        {
            pq.push({p[0], p[1]});
            
            if (pq.size() > k) {
                pq.pop();
            }
        }
        
        vector<vector<int> > ans;
        
        while (!pq.empty())
        {
            ans.push_back({pq.top().first, pq.top().second});
            pq.pop();
        }
        
        return ans;
    }
};
