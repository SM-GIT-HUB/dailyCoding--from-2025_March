class Solution {
  public:
    void getElems(int start, int end, int x, int n, int k, vector<int>& arr, vector<int>& ans)
    {
        while (start >= 0 && end < n && ans.size() < k)
        {
            int absSt = abs(arr[start] - x);
            int absEnd = abs(arr[end] - x);
            
            if (absEnd <= absSt) {
                ans.push_back(arr[end++]);
            }
            else
                ans.push_back(arr[start--]);
        }
        
        while (start >= 0 && ans.size() < k)
        {
            ans.push_back(arr[start--]);
        }
        
        while (end < n && ans.size() < k)
        {
            ans.push_back(arr[end++]);
        }
    }
  
    vector<int> printKClosest(vector<int> arr, int k, int x) {
        // Code here
        int n = arr.size();
        vector<int> ans;
        
        int index = lower_bound(arr.begin(), arr.end(), x) - arr.begin();
        
        if (index >= n)
        {
            for (int i = 0; i < k; i++)
            {
                ans.push_back(arr[n - i - 1]);
            }
            
            return ans;
        }
        
        int start = index - 1;
        int end = index;
        
        if (arr[index] == x) {
            end++;
        }
        
        getElems(start, end, x, n, k, arr, ans);
        
        return ans;
    }
};
