#include<bits/stdc++.h>
/*************************************************************
 
    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

array<int, 2> getCount(BinaryTreeNode<int>* root, int &ans)
{
    if (!root) return {-1, -1};

    if (!root->left && !root->right)
    {
        ans++;
        return {root->data, root->data};
    }

    array<int, 2> left = getCount(root->left, ans);
    array<int, 2> right = getCount(root->right, ans);

    int flag1 = (left[0] == -1 || left[0] == root->data) && (left[1] == -1 || left[1] == root->data);
    int flag2 = (right[0] == -1 || right[0] == root->data) && (right[1] == -1 || right[1] == root->data);

    if (flag1 && flag2) ans++;

    int mini = root->data;
    int maxi = root->data;

    if (left[0] != -1) mini = min(mini, left[0]);
    if (right[0] != -1) mini = min(mini, right[0]);

    if (left[1] != -1) maxi = max(maxi, left[1]);
    if (right[1] != -1) maxi = max(maxi, right[1]);

    return {mini, maxi};
}

int countUnivalTrees(BinaryTreeNode<int> *root)
{
    // Write your code here.
    int ans = 0;
    getCount(root, ans);

    return ans;
}
