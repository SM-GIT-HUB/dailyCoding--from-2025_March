#include<bits/stdc++.h>

int bfs(queue<pair<int, int> >& q, int m, int n, int &count, vector<vector<int> >& grid)
{
    int ans = 0;

    int dirs[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

    auto check = [&](int x, int y) {
        return (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1);
    };
    
    while (count && !q.empty())
    {
        ans++;
        int size = q.size();

        while (count && size--)
        {
            pair<int, int> curr = q.front();
            q.pop();

            int x = curr.first;
            int y = curr.second;

            for (auto &d : dirs)
            {
                if (check(x + d[0], y + d[1]))
                {
                    grid[x + d[0]][y + d[1]] = 2;
                    q.push({x + d[0], y + d[1]});
                    count--;
                }
            }
        }
    }

    return (count == 0)? ans : -1;
}

int minTimeToRot(vector<vector<int>>& grid, int m, int n)
{
    // Write your code here.
    queue<pair<int, int> > q;
    int count = 0;

    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (grid[i][j] == 2) {
                q.push({i, j});
            }
            else if (grid[i][j] == 1) {
                count++;
            }
        }
    }

    int ans = bfs(q, m, n, count, grid);
    return ans;
}
