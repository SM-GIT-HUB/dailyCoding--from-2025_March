#define ITR(x) begin(x), end(x)

class Solution {
public:
    long long maxSubarrays(int n, vector<vector<int>>& conflictingPairs) {
        vector<int> fMax(n + 1);
        vector<int> sMax(n + 1);

        for (auto &p : conflictingPairs)
        {
            int a = min(p[0], p[1]);
            int b = max(p[0], p[1]);
            
            if (a >= fMax[b])
            {
                sMax[b] = fMax[b];
                fMax[b] = a;
            }
            else if (a > sMax[b]) {
                sMax[b] = a;
            }
        }

        long long valid = 0;
        vector<long long> extra(n + 1);

        int f = 0;
        int s = 0;

        for (int i = 1; i <= n; i++)
        {
            if (fMax[i] > f)
            {
                s = f;
                f = fMax[i];
                s = max(s, sMax[i]);
            }
            else if (fMax[i] > s) {
                s = fMax[i];
            }
            else if (sMax[i] > s) {
                s = sMax[i];
            }

            valid += i - f;
            extra[f] += f - s;
        }

        return valid + *max_element(ITR(extra));
    }
};
