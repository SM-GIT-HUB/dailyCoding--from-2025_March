
class Solution {
    int mod = 1e9 + 7;
  public:
    int recur(int index, int n, int d, int curr, int sum, vector<int>& arr)
    {
        int rem = sum - curr;
        
        if (index >= n) {
            return (abs(rem - curr) == d && curr >= rem)? 1 : 0;
        }
    
        int ans = recur(index + 1, n, d, curr + arr[index], sum, arr);
        ans += recur(index + 1, n, d, curr, sum, arr);
    
        return ans;
    }
    
    int memoization(int index, int n, int d, int curr, int sum, vector<int>& arr, vector<vector<int> >& dp)
    {
        int rem = sum - curr;
        
        if (index >= n) {
            return (abs(rem - curr) == d && curr >= rem)? 1 : 0;
        }
    
        if (dp[index][curr] != -1) {
            return dp[index][curr];
        }
    
        int ans = memoization(index + 1, n, d, curr + arr[index], sum, arr, dp);
        ans = (ans + memoization(index + 1, n, d, curr, sum, arr, dp)) % mod;
    
        return dp[index][curr] = ans;
    }
  
    int countPartitions(vector<int>& arr, int d) {
        // Code here
        int n = arr.size();
        int sum = 0;

        for (int x : arr)
        {
            sum += x;
        }
    
        // int ans = recur(0, n, d, 0, sum, arr);
        
        vector<vector<int> > dp(n, vector<int>(sum + 1, -1));

        int ans = memoization(0, n, d, 0, sum, arr, dp);
    
        return ans;
    }
};
