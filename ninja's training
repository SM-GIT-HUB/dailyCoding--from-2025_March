
class Solution {
  public:
    int recur(int pre, int index, int n, vector<vector<int> >& arr)
    {
        if (index >= n) {
            return 0;
        }
        
        int ans = 0;
        
        if (pre == 0) {
            ans = max(arr[index][1] + recur(1, index + 1, n, arr), arr[index][2] + recur(2, index + 1, n, arr));
        }
        else if (pre == 1) {
            ans = max(arr[index][0] + recur(0, index + 1, n, arr), arr[index][2] + recur(2, index + 1, n, arr));
        }
        else
            ans = max(arr[index][0] + recur(0, index + 1, n, arr), arr[index][1] + recur(1, index + 1, n, arr));
        
        return ans;
    }
    
    int memoization(int pre, int index, int n, vector<vector<int> >& arr, vector<vector<int> >& dp)
    {
        if (index >= n) {
            return 0;
        }
    
        if (dp[index][pre] != -1) {
            return dp[index][pre];
        }
        
        int ans = 0;
        
        if (pre == 0) {
            ans = max(arr[index][1] + memoization(1, index + 1, n, arr, dp), arr[index][2] + memoization(2, index + 1, n, arr, dp));
        }
        else if (pre == 1) {
            ans = max(arr[index][0] + memoization(0, index + 1, n, arr, dp), arr[index][2] + memoization(2, index + 1, n, arr, dp));
        }
        else
            ans = max(arr[index][0] + memoization(0, index + 1, n, arr, dp), arr[index][1] + memoization(1, index + 1, n, arr, dp));
        
        return dp[index][pre] = ans;
    }
    
    int tabulation(int n, vector<vector<int> >& arr)
    {
        vector<vector<int> > dp(n + 1, {0, 0, 0});
        
        dp[n - 1][0] = max(arr[n - 1][1], arr[n - 1][2]);
        dp[n - 1][1] = max(arr[n - 1][0], arr[n - 1][2]);
        dp[n - 1][2] = max(arr[n - 1][0], arr[n - 1][1]);
        
        for (int index = n - 2; index >= 0; index--)
        {
            for (int pre = 0; pre < 3; pre++)
            {
                int ans = 0;
                
                if (pre == 0) {
                    ans = max(arr[index][1] + dp[index + 1][1], arr[index][2] + dp[index + 1][2]);
                }
                else if (pre == 1) {
                    ans = max(arr[index][0] + dp[index + 1][0], arr[index][2] + dp[index + 1][2]);
                }
                else
                    ans = max(arr[index][0] + dp[index + 1][0], arr[index][1] + dp[index + 1][1]);
                
                dp[index][pre] = ans;
            }
        }
        
        return max(dp[0][0], max(dp[0][1], dp[0][2]));
    }
    
    int spaceOpt(int n, vector<vector<int> >& arr)
    {
        vector<int> next(3, 0);
        vector<int> curr(3, 0);
        
        next[0] = max(arr[n - 1][1], arr[n - 1][2]);
        next[1] = max(arr[n - 1][0], arr[n - 1][2]);
        next[2] = max(arr[n - 1][0], arr[n - 1][1]);
        
        for (int index = n - 2; index >= 0; index--)
        {
            for (int pre = 0; pre < 3; pre++)
            {
                int ans = 0;
                
                if (pre == 0) {
                    ans = max(arr[index][1] + next[1], arr[index][2] + next[2]);
                }
                else if (pre == 1) {
                    ans = max(arr[index][0] + next[0], arr[index][2] + next[2]);
                }
                else
                    ans = max(arr[index][0] + next[0], arr[index][1] + next[1]);
                
                curr[pre] = ans;
            }
            
            next = curr;
        }
        
        return max(next[0], max(next[1], next[2]));
    }
  
    int maximumPoints(vector<vector<int>>& arr) {
        // Code here
        int n = arr.size();
        
        // int ans1 = arr[0][0] + recur(0, 1, n, arr);
        // int ans2 = arr[0][1] + recur(1, 1, n, arr);
        // int ans3 = arr[0][2] + recur(2, 1, n, arr);
        
        // vector<vector<int> > dp(n, vector<int>(3, -1));

        // int ans1 = arr[0][0] + memoization(0, 1, n, arr, dp);
        // int ans2 = arr[0][1] + memoization(1, 1, n, arr, dp);
        // int ans3 = arr[0][2] + memoization(2, 1, n, arr, dp);
        
        // int ans = tabulation(n, arr);
        
        int ans = spaceOpt(n, arr);
        
        return ans;
    }
};
