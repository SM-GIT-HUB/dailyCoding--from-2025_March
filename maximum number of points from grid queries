class Solution {
    int dirs[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
public:
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        int m = grid.size(), n = grid[0].size();
        int size = queries.size();

        vector<int> ans(size, 0);
        vector<pair<int, int> > qs;

        for (int i = 0; i < size; i++)
        {
            qs.push_back({queries[i], i});
        }

        sort(qs.begin(), qs.end());

        priority_queue<pair<int, pair<int, int> >, vector<pair<int, pair<int, int> > >, greater<> > pq;
        vector<vector<int> > visited(m, vector<int>(n, 0));

        pq.push({grid[0][0], {0, 0}});
        visited[0][0] = 1;

        int index = 0;
        int count = 0;

        auto check = [&](int x, int y) {
            return (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y]);
        };

        while (index < size)
        {
            int q = qs[index].first;
            int qIndex = qs[index].second;

            while (!pq.empty() && pq.top().first < q)
            {
                count++;
                int x = pq.top().second.first;
                int y = pq.top().second.second;
                pq.pop();

                for (auto &d : dirs)
                {
                    int newX = x + d[0], newY = y + d[1];

                    if (check(newX, newY))
                    {
                        visited[newX][newY] = 1;
                        pq.push({grid[newX][newY], {newX, newY}});
                    }
                }
            }

            ans[qIndex] = count;
            index++;
        }

        return ans;
    }
};
