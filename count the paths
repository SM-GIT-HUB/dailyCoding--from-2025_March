class Solution {
  public:
    int dfs(int node, vector<vector<int> >& adj, int &dest, vector<int>& dp)
    {
        if (node == dest) {
            return 1;
        }
        
        if (dp[node] != -1) {
            return dp[node];
        }
        
        int paths = 0;
        
        for (int adjNode : adj[node])
        {
            paths += dfs(adjNode, adj, dest, dp);
        }
        
        return dp[node] = paths;
    }
  
    int countPaths(vector<vector<int>>& edges, int V, int src, int dest) {
        // Code here
        vector<vector<int> > adj(V);
        
        for (auto &e : edges)
        {
            adj[e[0]].push_back(e[1]);
        }
        
        vector<int> dp(V, -1);
        
        int ans = dfs(src, adj, dest, dp);
        return ans;
    }
};
