int tabulation(int m, int n, string &s, string &t)
{
	vector<vector<int> > dp(m + 1, vector<int>(n + 1, 0));
    int ans = 0;

	for (int in1 = m - 1; in1 >= 0; in1--)
	{
		for (int in2 = n - 1; in2 >= 0; in2--)
		{
			if (s[in1] == t[in2])
            {
                dp[in1][in2] = 1 + dp[in1 + 1][in2 + 1];
                ans = max(dp[in1][in2], ans);
            }
            else
                dp[in1][in2] = 0;
		}
	}

	return ans;
}

int spaceOpt(int m, int n, string &s, string &t)
{
    vector<int> next(n + 1, 0);
    vector<int> curr(n + 1, 0);
    
    int ans = 0;

	for (int in1 = m - 1; in1 >= 0; in1--)
	{
		for (int in2 = n - 1; in2 >= 0; in2--)
		{
			if (s[in1] == t[in2])
            {
                curr[in2] = 1 + next[in2 + 1];
                ans = max(curr[in2], ans);
            }
            else
                curr[in2] = 0;
		}

        next = curr;
	}

	return ans;
}

int lcs(string &str1, string &str2){
    // Write your code here.
    int m = str1.size(), n = str2.size();

    // int ans = tabulation(m, n, str1, str2);

    int ans = spaceOpt(m, n, str1, str2);

    return ans;
}
