#include <bits/stdc++.h> 

struct Node {
    int isTerminal;
    Node* children[10];

    Node()
    {
        isTerminal = 0;
        for (int i = 0; i < 10; i++) children[i] = nullptr;
    }
};

class Trie {
    Node* root;

public:
    Trie()
    {
        root = new Node();
    }

    int insert(string &word)
    {
        Node* curr = root;

        for (char x : word)
        {
            if (!curr->children[x - 'a']) {
                curr->children[x - 'a'] = new Node();
            }

            curr = curr->children[x - 'a'];
            if (curr->isTerminal) return 1;
        }

        for (int i = 0; i < 10; i++)
        {
            if (curr->children[i]) return 1;
        }

        curr->isTerminal = 1;

        return 0;
    }
};

string findSimilar(vector<string>& A)
{
    // Write your code here.
    Trie tr;

    for (string &word : A)
    {
        if (tr.insert(word)) return word;
    }

    return "not found";
}
