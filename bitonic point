
// User function template for C++
class Solution {
  public:
    int binSearch(int start, int end, vector<int>& arr)
    {
        while (start <= end)
        {
            int mid = start + (end - start) / 2;

            if (mid > 0 && mid < arr.size() - 1)
            {
                if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {
                    return arr[mid];
                }
                else if (arr[mid - 1] < arr[mid] && arr[mid] < arr[mid + 1]) {
                    start = mid + 1;
                }
                else
                    end = mid - 1;
            }
            else if (mid == 0) {
                return (arr[0] > arr[1])? arr[0] : arr[1];
            }
            else if (mid == arr.size() - 1) {
                return (arr[arr.size() - 1] > arr[arr.size() - 2])? arr[arr.size() - 1] : arr[arr.size() - 2];
            }
        }
    }
  
    int findMaximum(vector<int> &arr) {
        // code here
        int ans = binSearch(0, arr.size(), arr);
        
        return ans;
    }
};
