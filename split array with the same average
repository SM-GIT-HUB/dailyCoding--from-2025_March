#include <bits/stdc++.h>

int memoization(int idx, int n, int taken, int curr, int k, int sum, vector<int>& arr, vector<vector<vector<int> > >& dp)
{
    if (taken == k) return (curr == sum);
    if (idx == n || curr > sum) return 0;

    if (dp[idx][taken][curr] != -1) return dp[idx][taken][curr];

    int include = memoization(idx + 1, n, taken + 1, curr + arr[idx], k, sum, arr, dp);

    if (include) return dp[idx][taken][curr] = 1;
    return dp[idx][taken][curr] = memoization(idx + 1, n, taken, curr, k, sum, arr, dp);
}

bool splitListWithSameAverage(vector<int>& arr) {
	// Write your code here.
    int n = arr.size();

    sort(arr.begin(), arr.end());

    int total = 0;
    for (int x : arr) total += x;

    for (int k = 1; k <= n / 2; k++)
    {
        int sum = (total * k) / n;

        if ((total * k) % n == 0)
        {
            vector<vector<vector<int> > > dp(n + 1, vector<vector<int> >(k + 1, vector<int>(sum + 1, -1)));
            if (memoization(0, n, 0, 0, k, sum, arr, dp)) return 1;
        }
    }

    return 0;
}
