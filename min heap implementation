class minHeap {
public:
    vector<int> heap;
    // Constructor for the class.
    minHeap(int n) {
        // Write your code here.
        heap.reserve(n);
    }

    void heapifyDown(int index)
    {
        int size = heap.size();

        while (index < size)
        {
            int left = 2 * index + 1;
            int right = left + 1;
            int swapIndex = index;

            if (left < size && heap[left] < heap[swapIndex]) {
                swapIndex = left;
            }

            if (right < size && heap[right] < heap[swapIndex]) {
                swapIndex = right;
            }

            if (swapIndex == index) {
                return;
            }

            swap(heap[index], heap[swapIndex]);
            index = swapIndex;
        }
    }

    void heapifyUp(int index)
    {
        while (index > 0)
        {
            int parent = (index - 1) / 2;

            if (heap[parent] <= heap[index]) {
                return;
            }

            swap(heap[parent], heap[index]);
            index = parent;
        }
    }

    // Implement the function to remove minimum element.
    int extractMinElement() {
        // Write you code here.
        if (heap.size() == 0) {
            return -1;
        }

        int x = heap[0];

        if (heap.size() == 1)
        {
            heap.pop_back();
            return x;
        }

        swap(heap[0], heap[heap.size() - 1]);
        heap.pop_back();

        heapifyDown(0);
        return x;
    }

    // Implement the function to delete an element.
    void deleteElement(int ind) {
        // Write you code here.
        if (ind >= heap.size()) {
            return;
        }

        if (heap.size() == 1)
        {
            heap.pop_back();
            return;
        }

        swap(heap[ind], heap[heap.size() - 1]);
        heap.pop_back();

        heapifyDown(ind);
    }

    // Implement the function to insert 'val' in the heap.
    void insert(int val) {
        // Write you code here.
        heap.push_back(val);
        heapifyUp(heap.size() - 1);
    }
};
