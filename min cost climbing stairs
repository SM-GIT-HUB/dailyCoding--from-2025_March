//Back-end complete function Template for C++

class Solution {
  public:
    int memoization(int index, int n, vector<int>& cost, vector<int>& dp)
    {
        if (index >= n) {
            return 0;
        }
        
        if (dp[index] != -1) {
            return dp[index];
        }
        
        int jump1 = memoization(index + 1, n, cost, dp);
        int jump2 = memoization(index + 2, n, cost, dp);
        
        return dp[index] = cost[index] + min(jump1, jump2);
    }
  
    int minCostClimbingStairs(vector<int>& cost) {
        // Write your code here
        int n = cost.size();
        vector<int> dp(n + 1, -1);
        
        return min(memoization(0, n, cost, dp), memoization(1, n, cost, dp));
    }
};
