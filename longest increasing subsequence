#include<bits/stdc++.h>

int recur(int prev, int index, int n, int *arr)
{
    if (index >= n) {
        return 0;
    }

    int ans = 0;

    int include = 0;

    if (prev == -1 || arr[prev] < arr[index]) {
        include = 1 + recur(index, index + 1, n, arr);
    }

    int exclude = recur(prev, index + 1, n, arr);

    return max(include, exclude);
}

int memoization(int prev, int index, int n, int *arr, vector<vector<int> >& dp)
{
    if (index >= n) {
        return 0;
    }

    if (dp[prev + 1][index] != -1) {
        return dp[prev + 1][index];
    }

    int ans = 0;

    int include = 0;

    if (prev == -1 || arr[prev] < arr[index]) {
        include = 1 + memoization(index, index + 1, n, arr, dp);
    }

    int exclude = memoization(prev, index + 1, n, arr, dp);

    return dp[prev + 1][index] = max(include, exclude);
}

int tabulation(int n, int *arr)
{
    vector<vector<int> > dp(n + 2, vector<int>(n + 1, 0));

    for (int prev = n - 2; prev >= -1; prev--)
    {
        for (int index = n - 1; index > prev; index--)
        {
            int ans = 0;

            int include = 0;

            if (prev == -1 || arr[prev] < arr[index]) {
                include = 1 + dp[index + 1][index + 1];
            }

            int exclude = dp[prev + 1][index + 1];

            dp[prev + 1][index] = max(include, exclude);
        }
    }

    return dp[0][0];
}

int spaceOpt(int n, int *arr)
{
    vector<int> next(n + 2, 0);
    vector<int> curr(n + 2, 0);

    for (int index = n - 1; index >= 0; index--)
    {
        for (int prev = index - 1; prev >= -1; prev--)
        {
            int ans = 0;

            int include = 0;

            if (prev == -1 || arr[prev] < arr[index]) {
                include = 1 + next[index + 1];
            }

            int exclude = next[prev + 1];

            curr[prev + 1] = max(include, exclude);
        }

        next = curr;
    }

    return next[0];
}

int tabSol(int n, int *arr)
{
    vector<int> dp(n, 1);
    int maxi = 1;

    for (int index = 1; index < n; index++)
    {
        for (int prev = 0; prev < index; prev++)
        {
            if (arr[prev] < arr[index]) {
                dp[index] = max(1 + dp[prev], dp[index]);
            }
        }

        maxi = max(dp[index], maxi);
    }

    return maxi;
}

int binSearchSol(int n, int *arr)
{
    vector<int> lis;
    lis.push_back(arr[0]);

    for (int i = 1; i < n; i++)
    {
        if (arr[i] > lis.back()) {
            lis.push_back(arr[i]);
        }
        else
        {
            int index = lower_bound(lis.begin(), lis.end(), arr[i]) - lis.begin();
            lis[index] = arr[i];
        }
    }

    return lis.size();
}

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    // int ans = recur(-1, 0, n, arr);

    // vector<vector<int> > dp(n + 1, vector<int>(n, -1));

    // int ans = memoization(-1, 0, n, arr, dp);

    // int ans = tabulation(n, arr);

    // int ans = spaceOpt(n, arr);

    // int ans = tabSol(n, arr);

    int ans = binSearchSol(n, arr);

    return ans;
}
