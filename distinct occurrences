class Solution {
  public:
    int memoization(int i, int m, int j, int n, string &pat, string &txt, vector<vector<int> >& dp)
    {
        if (i == m) return 1;
        if (j == n) return 0;
        
        if (dp[i][j] != -1) return dp[i][j];
        
        int ans = 0;
        
        if (pat[i] == txt[j]) {
            ans += memoization(i + 1, m, j + 1, n, pat, txt, dp);
        }
        
        ans += memoization(i, m, j + 1, n, pat, txt, dp);
        
        return dp[i][j] = ans;
    }
    
    int spaceOpt(int m, int n, string &pat, string &txt)
    {
        vector<int> next(n + 1, 1);
        vector<int> curr(n + 1, 0);
        
        for (int i = m - 1; i >= 0; i--)
        {
            for (int j = n - 1; j >= 0; j--)
            {
                int ans = 0;
                
                if (pat[i] == txt[j]) {
                    ans += next[j + 1];
                }
                
                ans += curr[j + 1];
                
                curr[j] = ans;
            }
            
            next = curr;
        }
        
        return next[0];
    }
  
    int subseqCount(string &txt, string &pat) {
        // code here
        int m = pat.size();
        int n = txt.size();
        if (m > n) return 0;
        
        // vector<vector<int> > dp(m, vector<int>(n, -1));
        
        return spaceOpt(m, n, pat, txt);
    }
};
