#include <bits/stdc++.h>

int flag = 0;
vector<int> gcds[21];

void calc()
{
    flag = 1;

    for (int i = 1; i < 21; i++)
    {
        for (int j = 1; j < 21; j++)
        {
            if (__gcd(i, j) == 1) gcds[i].push_back(j);
        }
    }
}

void dfs(int node, int parent, int counter, vector<int>& nodes, vector<int>& ans, vector<vector<int> >& adj, vector<array<int, 2> >& mapp)
{
    int val = nodes[node];

    int idx = -1;
    int count = -1;

    for (int x : gcds[val])
    {
        if (mapp[x][1] > count)
        {
            idx = mapp[x][0];
            count = mapp[x][1];
        }
    }

    ans[node] = idx;
    array<int, 2> prev = mapp[val];

    mapp[val] = {node, counter};

    for (int adjNode : adj[node])
    {
        if (adjNode != parent) {
            dfs(adjNode, node, counter + 1, nodes, ans, adj, mapp);
        }
    }

    mapp[val] = prev;
}

vector<int> closestCoprimeAncestor(vector<int>& nodes, vector<vector<int> >& edges, int n)
{
    // Write your code here.
    if (!flag) calc();

    vector<int> ans(n, -1);
    vector<vector<int> > adj(n);

    for (auto &e : edges)
    {
        int u = e[0], v = e[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<array<int, 2> > mapp(21, {-1, -1});
    dfs(0, -1, 0, nodes, ans, adj, mapp);

    return ans;
}
