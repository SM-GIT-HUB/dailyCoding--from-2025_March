#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

    class Node {
      public:
        T data;
        Node<T> *next;
        Node<T> *child;

        Node(T data) {
            this->data = data;
            next = NULL;
            child = NULL;
        }
    };

*****************************************************************/

void track(int level, int &maxLevel, Node<int>* &root, unordered_map<int, pair<Node<int>*, Node<int>* > >& mapp)
{
    if (root == nullptr) {
        return;
    }

    maxLevel = max(level, maxLevel);

    Node<int>* curr = root;

    while (curr != nullptr)
    {
        if (mapp.count(level) == 1)
        {
            mapp[level].second->next = curr;
            mapp[level].second = curr;
        }
        else
            mapp[level] = {curr, curr};
        

        if (curr->child) {
            track(level + 1, maxLevel, curr->child, mapp);
        }

        curr = curr->next;
    }
}

Node<int> *flattenMultiLinkedList(Node<int> *head) {
    // Write your code here.
    unordered_map<int, pair<Node<int>*, Node<int>* > > mapp;

    int maxLevel = 0;

    track(0, maxLevel, head, mapp);

    head = mapp[0].first;

    for (int i = 0; i < maxLevel; i++)
    {
        mapp[i].second->next = mapp[i + 1].first;
    }
    
    return head;
}
