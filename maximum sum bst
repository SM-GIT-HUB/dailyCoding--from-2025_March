#include <bits/stdc++.h> 
/*************************************************************
    Following is the Binary Search Tree node structure

    class BinaryTreeNode {

      public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };

*************************************************************/
class obj {
public:
    int sum;
    bool isBst;
    int mini;
    int maxi;
};

obj dfs(BinaryTreeNode<int>* &root, int &ans)
{
    if (root == nullptr) {
        return {0, true, INT_MAX, INT_MIN};
    }

    obj left = dfs(root->left, ans);
    obj right = dfs(root->right, ans);

    if (!left.isBst || !right.isBst) {
        return {0, false, 0, 0};
    }

    int flag = (root->data > left.maxi && root->data < right.mini);
    int mini = min(root->data, min(left.mini, right.mini));
    int maxi = max(root->data, max(left.maxi, right.maxi));

    int sum = root->data + left.sum + right.sum;

    if (flag == true) {
        ans = max(sum, ans);
    }

    return {sum, flag, mini, maxi};
}

int maximumSumBST(BinaryTreeNode<int>* root){
    // Write your code here
    int ans = 0;

    dfs(root, ans);

    return ans;
}
