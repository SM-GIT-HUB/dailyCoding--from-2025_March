/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dfs(int d, TreeNode* &root, int &maxi, TreeNode* &ans)
    {
        if (root == nullptr) {
            return 0;
        }

        int left = dfs(d + 1, root->left, maxi, ans);
        int right = dfs(d + 1, root->right, maxi, ans);

        int currD = max(d, max(left, right));

        if (left == right)
        {
            if (currD >= maxi)
            {
                maxi = currD;
                ans = root;
                return currD;
            }
        }
        
        maxi = max(max(d, max(left, right)), maxi);

        return currD;
    }

    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        TreeNode* ans = nullptr;
        int maxi = 0;
        dfs(0, root, maxi, ans);

        return ans;
    }
};
