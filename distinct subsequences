#include <bits/stdc++.h> 

int recur(int in1, int in2, int &m, int &n, string &s, string &t)
{
    if (in2 >= n) {
        return 1;
    }

    if (in1 >= m) {
        return 0;
    }

    int ans = 0;

    if (s[in1] == t[in2]) {
        ans += recur(in1 + 1, in2 + 1, m, n, s, t);
    }

    ans += recur(in1 + 1, in2, m, n, s, t);

    return ans;
}

int memoization(int in1, int in2, int &m, int &n, string &s, string &t, vector<vector<int> >& dp)
{
    if (in2 >= n) {
        return 1;
    }

    if (in1 >= m) {
        return 0;
    }

    if (dp[in1][in2] != -1) {
        return dp[in1][in2];
    }

    long long ans = 0;

    if (s[in1] == t[in2]) {
        ans += memoization(in1 + 1, in2 + 1, m, n, s, t, dp);
    }

    ans += memoization(in1 + 1, in2, m, n, s, t, dp);

    return dp[in1][in2] = ans;
}

int tabulation(int m, int n, string &s, string &t)
{
    vector<vector<long long> > dp(m + 1, vector<long long>(n + 1, 0));
    dp[m][n] = 1;

    for (int in1 = m - 1; in1 >= 0; in1--)
    {
        dp[in1][n] = 1;
        for (int in2 = n - 1; in2 >= 0; in2--)
        {
            int ans = 0;

            if (s[in1] == t[in2]) {
                ans += dp[in1 + 1][in2 + 1];
            }

            ans += dp[in1 + 1][in2];

            dp[in1][in2] = ans;
        }
    }

    return dp[0][0];
}

int spaceOpt(int m, int n, string &s, string &t)
{
    vector<long long> next(n + 1, 0);
    vector<long long> curr(n + 1, 0);
    next[n] = 1;

    for (int in1 = m - 1; in1 >= 0; in1--)
    {
        curr[n] = 1;
        for (int in2 = n - 1; in2 >= 0; in2--)
        {
            int ans = 0;

            if (s[in1] == t[in2]) {
                ans += next[in2 + 1];
            }

            ans += next[in2];

            curr[in2] = ans;
        }

        next = curr;
    }

    return next[0];
}

int numDistinct(string s, string t) {
    // Write your code here
    int m = s.size(), n = t.size();

    // int ans = recur(0, 0, m, n, s, t);

    // vector<vector<int> > dp(m, vector<int>(n, -1));

    // int ans = memoization(0, 0, m, n, s, t, dp);

    // int ans = tabulation(m, n, s, t);

    int ans = spaceOpt(m, n, s, t);

    return ans;
}
