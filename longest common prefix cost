#include<bits/stdc++.h>
using namespace std;

class trienode {
public:
	unordered_map<char, trienode*> children;
	int count;
	
	trienode()
	{
		int count = 0;
	}

	trienode* contains(char x)
	{
		return children[x];
	}

	void put(char x)
	{
		children[x] = new trienode();
	}

	trienode* get(char x)
	{
		return children[x];
	}

	int getCount()
	{
		return count;
	}

	void setCount()
	{
		count++;
	}
};

class Trie {
public:
	trienode* root = nullptr;

	Trie()
	{
		root = new trienode();
	}

	void insert(string &word)
	{
		trienode* curr = root;

		for (char x : word)
		{
			if (!curr->contains(x)) {
				curr->put(x);
			}

			curr = curr->get(x);
			curr->setCount();
		}
	}

	int length(string &w)
	{
		int ans = 0;
		trienode* curr = root;

		for (char x : w)
		{
			if (!curr->contains(x)) {
				break;
			}

			curr = curr->get(x);
			ans += curr->count;
		}

		return ans;
	}
};

void solve(int n, vector<string>& words, int qn, vector<string>& queries)
{
	vector<int> ans(qn, 0);
	Trie* t = new Trie();

	unordered_map<string, vector<int> > mapp;

	for (int i = 0; i < qn; i++)
	{
		mapp[queries[i]].push_back(i);
	}

	for (int i = 0; i < n; i++)
	{
		t->insert(words[i]);

		if (mapp.count(words[i]))
		{
			int len = t->length(words[i]);

			for (int index : mapp[words[i]])
			{
				ans[index] = i + 1 + len;
			}
		}
	}

	for (int i = 0; i < qn; i++)
	{
		if (ans[i] == 0) {
			ans[i] = n + t->length(queries[i]);
		}
	}

	for (auto &a : ans)
	{
		cout << a << endl;
	}
}

int main()
{				
	int n;
	int qn;
	cin >> n;

	vector<string> words(n);

	for (int i = 0; i < n; i++)
	{
		cin >> words[i];
	}

	cin >> qn;
	vector<string> queries(qn);

	for (int i = 0; i < qn; i++)
	{
		cin >> queries[i];
	}

	solve(n, words, qn, queries);
}
