class Solution {
  public:
    bitset<100000> visited;
    
    int dfs(int node, int &ans, vector<vector<int> >& adj)
    {
        visited[node] = 1;
        int maxi = 0;
        
        priority_queue<int, vector<int>, greater<int> > pq;
        
        int one = -1;
        int two = -1;
        
        for (int adjNode : adj[node])
        {
            if (!visited[adjNode])
            {
                int dist = dfs(adjNode, ans, adj);
                
                if (dist > one)
                {
                    two = one;
                    one = dist;
                }
                else if (dist > two) {
                    two = dist;
                }
                
                maxi = max(dist, maxi);
            }
        }
        
        ans = max(ans, maxi);
        if (one != -1 && two != -1) ans = max(ans, one + two);
        
        return (maxi + 1);
    }
  
    int diameter(int V, vector<vector<int> >& edges) {
        // Code here
        vector<vector<int> > adj(V);
        
        for (auto &e : edges)
        {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        
        int ans = 0;
        dfs(0, ans, adj);
        
        return ans;
    }
};
