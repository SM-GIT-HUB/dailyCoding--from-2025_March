#include <bits/stdc++.h> 
const int mod = 1e9 + 7;

int recur(int n)
{
    if (n <= 1) {
        return 1;
    }

    return recur(n - 1) + recur(n - 2);
}

long long memoization(int n, vector<long long>& dp)
{
    if (n <= 1) {
        return 1;
    }

    if (dp[n] != -1) {
        return dp[n];
    }

    return dp[n] = (memoization(n - 1, dp) % mod + memoization(n - 2, dp) % mod) % mod;
}

int tabulation(int n)
{
    vector<long long> dp(n + 1, 0);
    dp[0] = dp[1] = 1;

    for (int i = 2; i <= n; i++)
    {
        dp[i] = (dp[i - 1] + dp[i - 2]) % mod;
    }

    return dp[n];
}

int spaceOpt(int n)
{
    vector<long long> dp(n + 1, 0);
    long long a = 1, b = 1, c = 1;

    for (int i = 2; i <= n; i++)
    {
        c = (a + b) % mod;
        a = b;
        b = c;
    }

    return c;
}

int countDistinctWays(int n) {
    //  Write your code here.
    // int ans = recur(n);

    // vector<long long> dp(n + 1, -1);
    // int ans = memoization(n, dp);

    // int ans = tabulation(n);

    int ans = spaceOpt(n);

    return ans;
}
