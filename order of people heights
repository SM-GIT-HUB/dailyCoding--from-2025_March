#include<bits/stdc++.h>

class Segtree {
public:
	int size;
	vector<int> tree;

	void buildTree(int idx, int start, int end)
	{
		if (start == end)
		{
			tree[idx] = 1;
			return;
		}

		int mid = (start + end) >> 1;
		int left = 2 * idx + 1;
		int right = left + 1;

		buildTree(left, start, mid);
		buildTree(right, mid + 1, end);

		tree[idx] = tree[left] + tree[right];
	}

	Segtree(int n)
	{
		size = n;
		tree.resize(4 * n);
		buildTree(0, 0, size - 1);
	}

	int findSlot(int idx, int start, int end, int k)
	{
		tree[idx]--;

		if (start == end) return start;

		int mid = (start + end) >> 1;
		int left = 2 * idx + 1;
		int right = left + 1;

		if (tree[left] > k) {
			return findSlot(left, start, mid, k);
		}
		else
			return findSlot(right, mid + 1, end, k - tree[left]);
	}
};

vector<int> findOrder(vector<int>& height, vector<int>& infront) {
	// Write your code here.
	int n = height.size();
	vector<array<int, 2> > hs(n);

	for (int i = 0; i < n; i++) hs[i] = {height[i], infront[i]};

	sort(hs.begin(), hs.end());

	Segtree st(n);
	vector<int> ans(n);

	for (auto &[h, inf] : hs)
	{
		int slot = st.findSlot(0, 0, n - 1, inf);
		ans[slot] = h;
	}

	return ans;
}
