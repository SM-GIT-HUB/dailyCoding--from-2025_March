class Solution {
    int mod = 1e9 + 7;
public:
    long long recur(int n)
    {
        if (n == 0) {
            return 1;
        }

        if (n == 1 || n == 2) {
            return n;
        }

        return (2 * recur(n - 1) + recur(n - 3)) % mod;
    }

    long long memoization(int n, vector<int>& dp)
    {
        if (n == 0) {
            return 1;
        }

        if (n == 1 || n == 2) {
            return n;
        }

        if (dp[n] != -1) {
            return dp[n];
        }

        return dp[n] = (2 * memoization(n - 1, dp) + memoization(n - 3, dp)) % mod;
    }

    long long tabulation(int n)
    {
        if (n < 3) {
            return n;
        }

        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;

        for (int i = 3; i <= n; i++)
        {
            long long ans = (2LL * dp[i - 1] + dp[i - 3]) % mod;
            dp[i] = ans;
        }

        return dp[n];
    }

    long long spaceOpt(int n)
    {
        if (n < 3) {
            return n;
        }

        int prev3 = 1;
        int prev2 = 1;
        int prev1 = 2;

        for (int i = 3; i <= n; i++)
        {
            long long ans = (2LL * prev1 + prev3) % mod;

            prev3 = prev2;
            prev2 = prev1;
            prev1 = ans;
        }

        return prev1;
    }

    int numTilings(int n) {
        // int ans = recur(n);

        // vector<int> dp(n + 1, -1);

        // int ans = memoization(n, dp);

        // int ans = tabulation(n);

        int ans = spaceOpt(n);

        return ans;
    }
};
