/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* root, int right)
    {
        ListNode* prev = nullptr;
        ListNode* curr = root;
        ListNode* forward = nullptr;

        while (right--)
        {
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }

        root->next = forward;
        return prev;
    }

    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode* root = new ListNode(-1);
        
        root->next = head;
        ListNode* temp = root;

        while (--left)
        {
            temp = temp->next;
            right--;
        }

        temp->next = reverse(temp->next, right);
        return root->next;
    }
};
