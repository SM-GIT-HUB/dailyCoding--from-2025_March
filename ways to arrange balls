#include <bits/stdc++.h>

long long dp[16][16][16][3];

long long memoization(int p, int a, int b, int c)
{
	if (a > 1 && (!b && !c)) return 0;
	if (b > 1 && (!a && !c)) return 0;
	if (c > 1 && (!a && !b)) return 0;

	if (!a && !b && !c) return 1;

	if (dp[a][b][c][p] != -1) return dp[a][b][c][p];

	long long ans = 0;

	if (p == 0)
	{
		if (b) ans += memoization(1, a, b - 1, c);
		if (c) ans += memoization(2, a, b, c - 1);
	}
	else if (p == 1)
	{
		if (a) ans += memoization(0, a - 1, b, c);
		if (c) ans += memoization(2, a, b, c - 1);
	}
	else
	{
		if (a) ans += memoization(0, a - 1, b, c);
		if (b) ans += memoization(1, a, b - 1, c);
	}

	return dp[a][b][c][p] = ans;
}

long long int totalWays(int a, int b, int c)
{
	// Write your code here.
	long long ans = 0;
	memset(dp, -1, sizeof(dp));

	ans += memoization(0, a - 1, b, c);
	ans += memoization(1, a, b - 1, c);
	ans += memoization(2, a, b, c - 1);

	return ans;
}
