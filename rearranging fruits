class Solution {
public:
    long long minCost(vector<int>& basket1, vector<int>& basket2) {
        int mini = 1e9;
        unordered_map<int, int> mapp;

        for (int x : basket1)
        {
            mapp[x]++;
            if (x < mini) mini = x;
        }

        for (int x : basket2)
        {
            mapp[x]--;
            if (x < mini) mini = x;
        }

        vector<int> merge;

        for (auto &it : mapp)
        {
            if (abs(it.second) & 1) return -1;
            int half = abs(it.second) >> 1;

            for (int i = 0; i < half; i++) merge.push_back(it.first);
        }

        mini = mini << 1;
        long long ans = 0;
        int half = merge.size() >> 1;
        
        nth_element(merge.begin(), merge.begin() + half, merge.end());

        for (int i = 0; i < half; i++)
        {
            ans += min(mini, merge[i]);
        }

        return ans;
    }
};
