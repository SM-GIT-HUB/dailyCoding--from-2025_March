class Solution {
  public:
    struct Node {
        int val;
        Node* left;
        Node* right;
        
        Node(int val): val(val), left(nullptr), right(nullptr) {}
    };
    
    void dfs(Node* root, string curr, vector<string>& ans)
    {
        if (!root) return;
        
        if (!root->left && !root->right)
        {
            ans.push_back(curr);
            return;
        }
        
        dfs(root->left, curr + "0", ans);
        dfs(root->right, curr + "1", ans);
    }
  
    vector<string> huffmanCodes(string S, vector<int> f, int N) {
        // Code here
        auto comp = [](Node* a, Node* b) {
            return (a->val > b->val);
        };
        
        priority_queue<Node*, vector<Node*>, decltype(comp)> pq(comp);
        
        for (int x : f) pq.push(new Node(x));
        
        while (pq.size() != 1)
        {
            Node* left = pq.top();
            pq.pop();
            Node* right = pq.top();
            pq.pop();
            
            int val = left->val + right->val;
            Node* curr = new Node(val);
            
            curr->left = left;
            curr->right = right;
            
            pq.push(curr);
        }
        
        vector<string> ans;
        dfs(pq.top(), "", ans);
        
        return ans;
    }
};
